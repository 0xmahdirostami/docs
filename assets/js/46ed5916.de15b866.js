"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5926],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>k});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=m(a),c=i,k=p["".concat(s,".").concat(c)]||p[c]||d[c]||r;return a?n.createElement(k,l(l({ref:t},u),{},{components:a})):n.createElement(k,l({ref:t},u))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var m=2;m<r;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},3468:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var n=a(3117),i=(a(7294),a(3905));const r={},l="OracleReportSanityChecker",o={unversionedId:"contracts/oracle-report-sanity-checker",id:"contracts/oracle-report-sanity-checker",title:"OracleReportSanityChecker",description:"- Source code",source:"@site/docs/contracts/oracle-report-sanity-checker.md",sourceDirName:"contracts",slug:"/contracts/oracle-report-sanity-checker",permalink:"/contracts/oracle-report-sanity-checker",draft:!1,editUrl:"https://github.com/lidofinance/docs/blob/main/docs/contracts/oracle-report-sanity-checker.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"LegacyOracle",permalink:"/contracts/legacy-oracle"},next:{title:"OracleDaemonConfig",permalink:"/contracts/oracle-daemon-config"}},s={},m=[{value:"Limits List",id:"limits-list",level:2},{value:"Sanity Checks",id:"sanity-checks",level:2},{value:"checkAccountingOracleReport()",id:"checkaccountingoraclereport",level:3},{value:"Arguments",id:"arguments",level:4},{value:"checkExitBusOracleReport()",id:"checkexitbusoraclereport",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"checkExitedValidatorsRatePerDay()",id:"checkexitedvalidatorsrateperday",level:3},{value:"Arguments",id:"arguments-2",level:4},{value:"checkNodeOperatorsPerExtraDataItemCount()",id:"checknodeoperatorsperextradataitemcount",level:3},{value:"Arguments",id:"arguments-3",level:4},{value:"checkAccountingExtraDataListItemsCount()",id:"checkaccountingextradatalistitemscount",level:3},{value:"Arguments",id:"arguments-4",level:4},{value:"checkWithdrawalQueueOracleReport()",id:"checkwithdrawalqueueoraclereport",level:3},{value:"Arguments",id:"arguments-5",level:4},{value:"checkSimulatedShareRate()",id:"checksimulatedsharerate",level:3},{value:"Arguments",id:"arguments-6",level:4},{value:"View Methods",id:"view-methods",level:2},{value:"getLidoLocator()",id:"getlidolocator",level:3},{value:"getOracleReportLimits()",id:"getoraclereportlimits",level:3},{value:"getMaxPositiveTokenRebase()",id:"getmaxpositivetokenrebase",level:3},{value:"smoothenTokenRebase()",id:"smoothentokenrebase",level:3},{value:"Arguments",id:"arguments-7",level:4},{value:"Returns",id:"returns",level:4},{value:"Lever Methods",id:"lever-methods",level:2},{value:"setOracleReportLimits()",id:"setoraclereportlimits",level:3},{value:"Arguments",id:"arguments-8",level:4},{value:"setChurnValidatorsPerDayLimit()",id:"setchurnvalidatorsperdaylimit",level:3},{value:"Arguments",id:"arguments-9",level:4},{value:"setOneOffCLBalanceDecreaseBPLimit()",id:"setoneoffclbalancedecreasebplimit",level:3},{value:"Arguments",id:"arguments-10",level:4},{value:"setAnnualBalanceIncreaseBPLimit()",id:"setannualbalanceincreasebplimit",level:3},{value:"Arguments",id:"arguments-11",level:4},{value:"setSimulatedShareRateDeviationBPLimit()",id:"setsimulatedshareratedeviationbplimit",level:3},{value:"Arguments",id:"arguments-12",level:4},{value:"setMaxExitRequestsPerOracleReport()",id:"setmaxexitrequestsperoraclereport",level:3},{value:"Arguments",id:"arguments-13",level:4},{value:"setRequestTimestampMargin()",id:"setrequesttimestampmargin",level:3},{value:"Arguments",id:"arguments-14",level:4},{value:"setMaxPositiveTokenRebase()",id:"setmaxpositivetokenrebase",level:3},{value:"Arguments",id:"arguments-15",level:4},{value:"setMaxAccountingExtraDataListItemsCount()",id:"setmaxaccountingextradatalistitemscount",level:3},{value:"Arguments",id:"arguments-16",level:4},{value:"setMaxNodeOperatorsPerExtraDataItemCount()",id:"setmaxnodeoperatorsperextradataitemcount",level:3},{value:"Arguments",id:"arguments-17",level:4},{value:"Permissions",id:"permissions",level:2},{value:"ALL_LIMITS_MANAGER_ROLE()",id:"all_limits_manager_role",level:3},{value:"CHURN_VALIDATORS_PER_DAY_LIMIT_MANAGER_ROLE()",id:"churn_validators_per_day_limit_manager_role",level:3},{value:"ONE_OFF_CL_BALANCE_DECREASE_LIMIT_MANAGER_ROLE()",id:"one_off_cl_balance_decrease_limit_manager_role",level:3},{value:"ANNUAL_BALANCE_INCREASE_LIMIT_MANAGER_ROLE()",id:"annual_balance_increase_limit_manager_role",level:3},{value:"SHARE_RATE_DEVIATION_LIMIT_MANAGER_ROLE()",id:"share_rate_deviation_limit_manager_role",level:3},{value:"MAX_VALIDATOR_EXIT_REQUESTS_PER_REPORT_ROLE()",id:"max_validator_exit_requests_per_report_role",level:3},{value:"MAX_ACCOUNTING_EXTRA_DATA_LIST_ITEMS_COUNT_ROLE()",id:"max_accounting_extra_data_list_items_count_role",level:3},{value:"MAX_NODE_OPERATORS_PER_EXTRA_DATA_ITEM_COUNT_ROLE()",id:"max_node_operators_per_extra_data_item_count_role",level:3},{value:"REQUEST_TIMESTAMP_MARGIN_MANAGER_ROLE()",id:"request_timestamp_margin_manager_role",level:3},{value:"MAX_POSITIVE_TOKEN_REBASE_MANAGER_ROLE()",id:"max_positive_token_rebase_manager_role",level:3},{value:"Events",id:"events",level:2},{value:"ChurnValidatorsPerDayLimitSet()",id:"churnvalidatorsperdaylimitset",level:3},{value:"Arguments",id:"arguments-18",level:4},{value:"OneOffCLBalanceDecreaseBPLimitSet()",id:"oneoffclbalancedecreasebplimitset",level:3},{value:"Arguments",id:"arguments-19",level:4},{value:"AnnualBalanceIncreaseBPLimitSet()",id:"annualbalanceincreasebplimitset",level:3},{value:"Arguments",id:"arguments-20",level:4},{value:"SimulatedShareRateDeviationBPLimitSet()",id:"simulatedshareratedeviationbplimitset",level:3},{value:"Arguments",id:"arguments-21",level:4},{value:"MaxPositiveTokenRebaseSet()",id:"maxpositivetokenrebaseset",level:3},{value:"Arguments",id:"arguments-22",level:4},{value:"MaxValidatorExitRequestsPerReportSet()",id:"maxvalidatorexitrequestsperreportset",level:3},{value:"Arguments",id:"arguments-23",level:4},{value:"MaxAccountingExtraDataListItemsCountSet()",id:"maxaccountingextradatalistitemscountset",level:3},{value:"Arguments",id:"arguments-24",level:4},{value:"MaxNodeOperatorsPerExtraDataItemCountSet()",id:"maxnodeoperatorsperextradataitemcountset",level:3},{value:"Arguments",id:"arguments-25",level:4},{value:"RequestTimestampMarginSet()",id:"requesttimestampmarginset",level:3},{value:"Arguments",id:"arguments-26",level:4}],u={toc:m},p="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"oraclereportsanitychecker"},"OracleReportSanityChecker"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/lidofinance/lido-dao/blob/master/contracts/0.8.9/sanity_checks/OracleReportSanityChecker.sol"},"Source code")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://etherscan.io/address/0x9305c1Dbfe22c12c66339184C0025d7006f0f1cC"},"Deployed contract"))),(0,i.kt)("p",null,"Some vital data for the Lido protocol is collected off-chain and delivered on-chain via Oracle contracts:\n",(0,i.kt)("a",{parentName:"p",href:"/contracts/accounting-oracle"},(0,i.kt)("inlineCode",{parentName:"a"},"AccountingOracle")),", ",(0,i.kt)("a",{parentName:"p",href:"/contracts/validators-exit-bus-oracle"},(0,i.kt)("inlineCode",{parentName:"a"},"ValidatorsExitBusOracle")),".\nDue to the high impact of data provided by the Oracles on the state of the protocol, each Oracle's\nreport passes a set of onchain\n",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Sanity_check"},"sanity checks"),".\nFor the simplicity of the contracts responsible for handling Oracle's reports, all sanity checks were collected in the\nstandalone ",(0,i.kt)("inlineCode",{parentName:"p"},"OracleReportSanityChecker")," contract."),(0,i.kt)("p",null,"Besides the validation methods, the ",(0,i.kt)("inlineCode",{parentName:"p"},"OracleReportSanityChecker")," contract contains a ",(0,i.kt)("a",{parentName:"p",href:"#limits-list"},"set of tunable limits and restrictions"),"\nused during the report validation process.\nTo configure the limits values contract provides the lever methods described in the ",(0,i.kt)("a",{parentName:"p",href:"#lever-methods"},"standalone section"),".\nAccess to lever methods is restricted using the functionality of the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/lidofinance/lido-dao/blob/master/contracts/0.8.9/utils/access/AccessControlEnumerable.sol"},"AccessControlEnumerable"),"\ncontract and a bunch of ",(0,i.kt)("a",{parentName:"p",href:"#permissions"},"granular roles"),"."),(0,i.kt)("h2",{id:"limits-list"},"Limits List"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"OracleReportSanityChecker")," introduces a new type ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList")," which contains all the limits used by the contract."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"struct LimitsList {\n    uint256 churnValidatorsPerDayLimit;\n    uint256 oneOffCLBalanceDecreaseBPLimit;\n    uint256 annualBalanceIncreaseBPLimit;\n    uint256 simulatedShareRateDeviationBPLimit;\n    uint256 maxValidatorExitRequestsPerReport;\n    uint256 maxAccountingExtraDataListItemsCount;\n    uint256 maxNodeOperatorsPerExtraDataItemCount;\n    uint256 requestTimestampMargin;\n    uint256 maxPositiveTokenRebase;\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"churnValidatorsPerDayLimit")," \u2208 ","[0, 65535]")," \u2014 the max possible number of validators that might been reported as ",(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"appeared")),"\nor ",(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"exited"))," during a single day. ",(0,i.kt)("a",{parentName:"li",href:"/contracts/accounting-oracle"},(0,i.kt)("inlineCode",{parentName:"a"},"AccountingOracle"))," reports validators as ",(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"appeared"))," once them become\n",(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"pending"))," (might be not ",(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"activated"))," yet). Thus, this limit should be high enough for such cases because Consensus Layer has no\nintrinsic churn limit for the amount of ",(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"pending"))," validators (only for ",(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"activated"))," instead).\nFor Lido it's limited by the max daily deposits via ",(0,i.kt)("a",{parentName:"li",href:"/contracts/deposit-security-module"},(0,i.kt)("inlineCode",{parentName:"a"},"DepositSecurityModule")),". In contrast, ",(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"exited"))," are reported according to the\n",(0,i.kt)("a",{parentName:"li",href:"https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#get_validator_churn_limit"},"Consensus Layer churn limit"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"oneOffCLBalanceDecreaseBPLimit")," \u2208 ","[0, 10000]")," \u2014 the max decrease of the total validators' balances on the Consensus Layer since\nthe previous oracle report. Represented in the ",(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Basis_point"},"Basis Points")," (100% == 10000)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"annualBalanceIncreaseBPLimit")," \u2208 ","[0, 10000]")," \u2014 the max annual increase of the total validators' balances on the Consensus Layer\nsince the previous oracle report. Represented in the ",(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Basis_point"},"Basis Points")," (100% == 10000)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"simulatedShareRateDeviationBPLimit")," \u2208 ","[0, 10000]")," \u2014 the max deviation of the provided ",(0,i.kt)("inlineCode",{parentName:"li"},"simulatedShareRate")," and the actual one within the\ncurrently processing oracle report. Represented in the ",(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Basis_point"},"Basis Points")," (100% == 10000)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"maxValidatorExitRequestsPerReport")," \u2208 ","[0, 65535]")," \u2014 the max number of exit requests allowed in report\nto ",(0,i.kt)("a",{parentName:"li",href:"/contracts/validators-exit-bus-oracle"},"ValidatorsExitBusOracle")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"maxAccountingExtraDataListItemsCount")," \u2208 ","[0, 65535]")," \u2014 the max number of data list items reported to accounting oracle in extra data"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"maxNodeOperatorsPerExtraDataItemCount")," \u2208 ","[0, 65535]")," \u2014 the max number of node operators reported per extra data list item"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"requestTimestampMargin")," \u2208 ","[0, type(uint64).max]")," \u2014 the min time required to be passed from the creation of the request to be finalized till the time of the oracle report"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"maxPositiveTokenRebase")," \u2208 ","[1, type(uint64).max]")," \u2014 the max positive token rebase allowed per single oracle report token rebase\nhappens on total supply adjustment, huge positive rebase can incur oracle report sandwiching.\nUses 1e9 precision, e.g.: ",(0,i.kt)("inlineCode",{parentName:"li"},"1e6")," \u2014 0.1%; ",(0,i.kt)("inlineCode",{parentName:"li"},"1e9")," \u2014 100%; ",(0,i.kt)("inlineCode",{parentName:"li"},"type(uint64).max")," \u2014 unlimited rebase.")),(0,i.kt)("h2",{id:"sanity-checks"},"Sanity Checks"),(0,i.kt)("h3",{id:"checkaccountingoraclereport"},"checkAccountingOracleReport()"),(0,i.kt)("p",null,"Applies sanity checks to the accounting parameters of Lido's Oracle report."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Below is the list of restrictions checked by the method execution:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Revert with ",(0,i.kt)("inlineCode",{parentName:"li"},"IncorrectWithdrawalsVaultBalance(uint256 actualWithdrawalVaultBalance)")," error when the reported withdrawals\nvault balance ",(0,i.kt)("strong",{parentName:"li"},"is greater than")," the actual balance of the withdrawal vault."),(0,i.kt)("li",{parentName:"ul"},"Revert with ",(0,i.kt)("inlineCode",{parentName:"li"},"IncorrectELRewardsVaultBalance(uint256 actualELRewardsVaultBalance)")," error when reported EL rewards vault\nbalance ",(0,i.kt)("strong",{parentName:"li"},"is greater than")," the actual balance of EL rewards vault."),(0,i.kt)("li",{parentName:"ul"},"Revert with ",(0,i.kt)("inlineCode",{parentName:"li"},"IncorrectSharesRequestedToBurn(uint256 actualSharesToBurn)")," error when the amount of stETH shares requested\nto burn ",(0,i.kt)("strong",{parentName:"li"},"exceeds")," the number of shares marked to be burned in the Burner contract."),(0,i.kt)("li",{parentName:"ul"},"Revert with ",(0,i.kt)("inlineCode",{parentName:"li"},"IncorrectCLBalanceDecrease(uint256 oneOffCLBalanceDecreaseBP)")," error when Consensus Layer one-off balance\ndecrease in basis points ",(0,i.kt)("strong",{parentName:"li"},"exceeds")," the allowed ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.oneOffCLBalanceDecreaseBPLimit"),"."),(0,i.kt)("li",{parentName:"ul"},"Revert with ",(0,i.kt)("inlineCode",{parentName:"li"},"IncorrectCLBalanceIncrease(uint256 annualBalanceDiff)")," error when Consensus Layer annual balance increase\nexpressed in basis points ",(0,i.kt)("strong",{parentName:"li"},"exceeds")," allowed ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.annualBalanceIncreaseBPLimit"),"."),(0,i.kt)("li",{parentName:"ul"},"Revert with ",(0,i.kt)("inlineCode",{parentName:"li"},"IncorrectAppearedValidators(uint256 churnLimit)")," error when the number of appeared validators ",(0,i.kt)("strong",{parentName:"li"},"exceeds"),"\nthe limit set by ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.churnValidatorsPerDayLimit"),"."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function checkAccountingOracleReport(\n    uint256 _timeElapsed,\n    uint256 _preCLBalance,\n    uint256 _postCLBalance,\n    uint256 _withdrawalVaultBalance,\n    uint256 _elRewardsVaultBalance,\n    uint256 _sharesRequestedToBurn,\n    uint256 _preCLValidators,\n    uint256 _postCLValidators\n)\n")),(0,i.kt)("h4",{id:"arguments"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_timeElapsed"))," \u2014 time elapsed since the previous oracle report, measured in ",(0,i.kt)("strong",{parentName:"li"},"seconds")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_preCLBalance"))," \u2014 sum of all Lido validators' balances on the Consensus Layer before the current oracle report\n(NB: also include the initial balance of newly appeared validators)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_postCLBalance"))," \u2014 sum of all Lido validators' balances on the Consensus Layer after the current oracle report"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_withdrawalVaultBalance"))," \u2014 withdrawal vault balance on Execution Layer for the report reference slot"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_elRewardsVaultBalance"))," \u2014 el rewards vault balance on Execution Layer for the report reference slot"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_sharesRequestedToBurn"))," \u2014 shares requested to burn for the report reference slot"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_preCLValidators"))," \u2014 Lido-participating validators on the CL side before the current oracle report"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_postCLValidators"))," \u2014 Lido-participating validators on the CL side after the current oracle report")),(0,i.kt)("h3",{id:"checkexitbusoraclereport"},"checkExitBusOracleReport()"),(0,i.kt)("p",null,"Validates that number of exit requests does not exceed the limit set by ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.maxValidatorExitRequestsPerReport"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Reverts with ",(0,i.kt)("inlineCode",{parentName:"p"},"IncorrectNumberOfExitRequestsPerReport(uint256 maxRequestsCount)")," error when check is failed.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function checkExitBusOracleReport(uint256 _exitRequestsCount)\n")),(0,i.kt)("h4",{id:"arguments-1"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_exitRequestsCount"))," \u2014 number of validator exit requests supplied per oracle report")),(0,i.kt)("h3",{id:"checkexitedvalidatorsrateperday"},"checkExitedValidatorsRatePerDay()"),(0,i.kt)("p",null,"Validates that number of exited validators does not exceed the limit set by ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.churnValidatorsPerDayLimit"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Reverts with ",(0,i.kt)("inlineCode",{parentName:"p"},"ExitedValidatorsLimitExceeded(uint256 limitPerDay, uint256 exitedPerDay)")," error when check is failed.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function checkExitedValidatorsRatePerDay(uint256 _exitedValidatorsCount)\n")),(0,i.kt)("h4",{id:"arguments-2"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_exitedValidatorsCount"))," \u2014 number of validator exit requests supplied per oracle report")),(0,i.kt)("h3",{id:"checknodeoperatorsperextradataitemcount"},"checkNodeOperatorsPerExtraDataItemCount()"),(0,i.kt)("p",null,"Validates that number of node operators reported per extra data item does not exceed the limit\nset by ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.maxNodeOperatorsPerExtraDataItemCount"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Reverts with ",(0,i.kt)("inlineCode",{parentName:"p"},"TooManyNodeOpsPerExtraDataItem(uint256 itemIndex, uint256 nodeOpsCount)")," error when check is failed.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function checkNodeOperatorsPerExtraDataItemCount(\n    uint256 _itemIndex,\n    uint256 _nodeOperatorsCount\n)\n")),(0,i.kt)("h4",{id:"arguments-3"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_itemIndex"))," \u2014 index of item in extra data"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_nodeOperatorsCount"))," \u2014 number of validator exit requests supplied per oracle report")),(0,i.kt)("h3",{id:"checkaccountingextradatalistitemscount"},"checkAccountingExtraDataListItemsCount()"),(0,i.kt)("p",null,"Validates that number of extra data items in the report does not exceed the limit\nset by ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.maxAccountingExtraDataListItemsCount"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Reverts with ",(0,i.kt)("inlineCode",{parentName:"p"},"MaxAccountingExtraDataItemsCountExceeded(uint256 maxItemsCount, uint256 receivedItemsCount)")," error when check is failed.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function checkAccountingExtraDataListItemsCount(uint256 _extraDataListItemsCount)\n")),(0,i.kt)("h4",{id:"arguments-4"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_extraDataListItemsCount"))," \u2014 number of validator exit requests supplied per oracle report")),(0,i.kt)("h3",{id:"checkwithdrawalqueueoraclereport"},"checkWithdrawalQueueOracleReport()"),(0,i.kt)("p",null,"Validates that withdrawal request with the passed ",(0,i.kt)("inlineCode",{parentName:"p"},"_lastFinalizableRequestId")," was created more\nthan ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.requestTimestampMargin")," seconds ago."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Reverts with ",(0,i.kt)("inlineCode",{parentName:"p"},"IncorrectRequestFinalization(uint256 requestCreationBlock)")," error when check is failed.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function checkWithdrawalQueueOracleReport(\n    uint256 _lastFinalizableRequestId,\n    uint256 _reportTimestamp\n)\n")),(0,i.kt)("h4",{id:"arguments-5"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_lastFinalizableRequestId"))," \u2014 last finalizable withdrawal request id"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_reportTimestamp"))," \u2014 timestamp when the originated oracle report was submitted")),(0,i.kt)("h3",{id:"checksimulatedsharerate"},"checkSimulatedShareRate()"),(0,i.kt)("p",null,"Applies sanity checks to the simulated share rate for withdrawal requests finalization."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Reverts with ",(0,i.kt)("inlineCode",{parentName:"p"},"IncorrectSimulatedShareRate(uint256 simulatedShareRate, uint256 actualShareRate)")," error\nwhen simulated share rate deviation exceeds the limit set by ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.simulatedShareRateDeviationBPLimit"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function checkSimulatedShareRate(\n    uint256 _postTotalPooledEther,\n    uint256 _postTotalShares,\n    uint256 _etherLockedOnWithdrawalQueue,\n    uint256 _sharesBurntDueToWithdrawals,\n    uint256 _simulatedShareRate\n)\n")),(0,i.kt)("h4",{id:"arguments-6"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_postTotalPooledEther"))," \u2014 total pooled ether after report applied"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_postTotalShares"))," \u2014 total shares after report applied"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_etherLockedOnWithdrawalQueue"))," \u2014 ether locked on withdrawal queue for the current oracle report"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_sharesBurntDueToWithdrawals"))," \u2014 shares burnt due to withdrawals finalization"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_simulatedShareRate")),' \u2014 share rate provided with the oracle report (simulated via off-chain "eth_call")')),(0,i.kt)("h2",{id:"view-methods"},"View Methods"),(0,i.kt)("h3",{id:"getlidolocator"},"getLidoLocator()"),(0,i.kt)("p",null,"Returns the address of the protocol-wide ",(0,i.kt)("a",{parentName:"p",href:"/contracts/lido-locator"},"LidoLocator")," instance."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function getLidoLocator() returns (address)\n")),(0,i.kt)("h3",{id:"getoraclereportlimits"},"getOracleReportLimits()"),(0,i.kt)("p",null,"Returns the limits list used for the sanity checks as the ",(0,i.kt)("a",{parentName:"p",href:"#limits-list"},(0,i.kt)("inlineCode",{parentName:"a"},"LimitsList"))," type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function getOracleReportLimits() returns (LimitsList memory)\n")),(0,i.kt)("h3",{id:"getmaxpositivetokenrebase"},"getMaxPositiveTokenRebase()"),(0,i.kt)("p",null,"Returns max positive token rebase value with 1e9 precision (e.g.: ",(0,i.kt)("inlineCode",{parentName:"p"},"1e6")," \u2014 0.1%; ",(0,i.kt)("inlineCode",{parentName:"p"},"1e9")," \u2014 100%):"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Special values:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0")," (zero value) means uninitialized"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type(uint64).max")," means unlimited, e.g. not enforced"))),(0,i.kt)("p",null,"Get max positive rebase allowed per single oracle report. Token rebase happens on total supply and/or total\nshares adjustment, while huge positive rebase can incur oracle report sandwiching stealing part of the\nstETH holders' rewards."),(0,i.kt)("p",null,"The relative positive rebase value derived as follows:"),(0,i.kt)("p",null,"stETH balance for the ",(0,i.kt)("inlineCode",{parentName:"p"},"account")," defined as:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"    balanceOf(account) =\n        shares[account] * totalPooledEther / totalShares = shares[account] * shareRate\n")),(0,i.kt)("p",null,"Suppose shareRate changes when oracle reports (see ",(0,i.kt)("inlineCode",{parentName:"p"},"handleOracleReport"),")\nwhich means that token rebase happens:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"    preShareRate = preTotalPooledEther() / preTotalShares()\n    postShareRate = postTotalPooledEther() / postTotalShares()\n    R = (postShareRate - preShareRate) / preShareRate\n")),(0,i.kt)("p",null,"here ",(0,i.kt)("inlineCode",{parentName:"p"},"R > 0")," corresponds to the relative positive rebase value (i.e., instant APR)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function getMaxPositiveTokenRebase() returns (uint256)\n")),(0,i.kt)("h3",{id:"smoothentokenrebase"},"smoothenTokenRebase()"),(0,i.kt)("p",null,"Evaluates the following amounts during Lido's oracle report processing:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the allowed ETH amount that might be taken from the withdrawal vault and EL rewards vault"),(0,i.kt)("li",{parentName:"ul"},"the allowed amount of stETH shares to be burnt")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function smoothenTokenRebase(\n    uint256 _preTotalPooledEther,\n    uint256 _preTotalShares,\n    uint256 _preCLBalance,\n    uint256 _postCLBalance,\n    uint256 _withdrawalVaultBalance,\n    uint256 _elRewardsVaultBalance,\n    uint256 _sharesRequestedToBurn,\n    uint256 _etherToLockForWithdrawals,\n    uint256 _newSharesToBurnForWithdrawals\n) returns (\n    uint256 withdrawals,\n    uint256 elRewards,\n    uint256 simulatedSharesToBurn,\n    uint256 sharesToBurn\n)\n")),(0,i.kt)("h4",{id:"arguments-7"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_preTotalPooledEther"))," \u2014 total amount of ETH controlled by the protocol"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_preTotalShares"))," \u2014 total amount of minted stETH shares"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_preCLBalance"))," \u2014 sum of all Lido validators' balances on the Consensus Layer before the current oracle report"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_postCLBalance"))," \u2014 sum of all Lido validators' balances on the Consensus Layer after the current oracle report"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_withdrawalVaultBalance"))," \u2014 withdrawal vault balance on Execution Layer for the report calculation moment"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_elRewardsVaultBalance"))," \u2014 elRewards vault balance on Execution Layer for the report calculation moment"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_sharesRequestedToBurn"))," \u2014 shares requested to burn through Burner for the report calculation moment"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_etherToLockForWithdrawals"))," \u2014 ether to lock on withdrawals queue contract"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_newSharesToBurnForWithdrawals"))," \u2014 new shares to burn due to withdrawal requests finalization")),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"withdrawals"))," \u2014 ETH amount allowed to be taken from the withdrawals vault"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"elRewards"))," \u2014 ETH amount allowed to be taken from the EL rewards vault"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"simulatedSharesToBurn"))," \u2014 simulated amount of shares to be burnt (if no ether locked on withdrawals)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"sharesToBurn"))," \u2014 amount of shares to be burnt (accounting for withdrawals finalization)")),(0,i.kt)("h2",{id:"lever-methods"},"Lever Methods"),(0,i.kt)("h3",{id:"setoraclereportlimits"},"setOracleReportLimits()"),(0,i.kt)("p",null,"Sets the new values for the limits list."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Requires ",(0,i.kt)("inlineCode",{parentName:"li"},"ALL_LIMITS_MANAGER_ROLE")," to be granted to the caller."),(0,i.kt)("li",{parentName:"ul"},"Reverts with ",(0,i.kt)("inlineCode",{parentName:"li"},"IncorrectLimitValue(uint256 value, uint256 minAllowedValue, uint256 maxAllowedValue)")," error when some\nvalue in the passed data out of the allowed range.\nSee details of allowed value boundaries in the ",(0,i.kt)("a",{parentName:"li",href:"#limits-list"},"Limits List")," section."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function setOracleReportLimits(LimitsList memory _limitsList)\n")),(0,i.kt)("h4",{id:"arguments-8"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_limitsList"))," \u2014 new limits list values")),(0,i.kt)("h3",{id:"setchurnvalidatorsperdaylimit"},"setChurnValidatorsPerDayLimit()"),(0,i.kt)("p",null,"Sets the new value for the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.churnValidatorsPerDayLimit"),".\nThe limit is applicable for ",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("strong",{parentName:"em"},"appeared"))," and ",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("strong",{parentName:"em"},"exited"))," validators."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Requires ",(0,i.kt)("inlineCode",{parentName:"li"},"CHURN_VALIDATORS_PER_DAY_LIMIT_MANAGER_ROLE")," to be granted to the caller."),(0,i.kt)("li",{parentName:"ul"},"Reverts with ",(0,i.kt)("inlineCode",{parentName:"li"},"IncorrectLimitValue()")," error when the passed value is out of the allowed range.\nSee ",(0,i.kt)("a",{parentName:"li",href:"#limits-list"},"Limits List")," section for details."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function setChurnValidatorsPerDayLimit(uint256 _churnValidatorsPerDayLimit)\n")),(0,i.kt)("h4",{id:"arguments-9"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_churnValidatorsPerDayLimit"))," \u2014 new ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.churnValidatorsPerDayLimit")," value")),(0,i.kt)("h3",{id:"setoneoffclbalancedecreasebplimit"},"setOneOffCLBalanceDecreaseBPLimit()"),(0,i.kt)("p",null,"Sets the new value for the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.oneOffCLBalanceDecreaseBPLimit")," variable."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Requires ",(0,i.kt)("inlineCode",{parentName:"li"},"ONE_OFF_CL_BALANCE_DECREASE_LIMIT_MANAGER_ROLE")," to be granted to the caller."),(0,i.kt)("li",{parentName:"ul"},"Reverts with ",(0,i.kt)("inlineCode",{parentName:"li"},"IncorrectLimitValue()")," error when the passed value is out of the allowed range.\nSee ",(0,i.kt)("a",{parentName:"li",href:"#limits-list"},"Limits List")," section for details."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function setOneOffCLBalanceDecreaseBPLimit(uint256 _oneOffCLBalanceDecreaseBPLimit)\n")),(0,i.kt)("h4",{id:"arguments-10"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_oneOffCLBalanceDecreaseBPLimit"))," \u2014 new value for ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.oneOffCLBalanceDecreaseBPLimit"))),(0,i.kt)("h3",{id:"setannualbalanceincreasebplimit"},"setAnnualBalanceIncreaseBPLimit()"),(0,i.kt)("p",null,"Sets the new value for the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.annualBalanceIncreaseBPLimit")," variable."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Requires ",(0,i.kt)("inlineCode",{parentName:"li"},"ANNUAL_BALANCE_INCREASE_LIMIT_MANAGER_ROLE")," to be granted to the caller."),(0,i.kt)("li",{parentName:"ul"},"Reverts with ",(0,i.kt)("inlineCode",{parentName:"li"},"IncorrectLimitValue()")," error when the passed value is out of the allowed range.\nSee ",(0,i.kt)("a",{parentName:"li",href:"#limits-list"},"Limits List")," section for details."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function setAnnualBalanceIncreaseBPLimit(uint256 _annualBalanceIncreaseBPLimit)\n")),(0,i.kt)("h4",{id:"arguments-11"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_annualBalanceIncreaseBPLimit"))," \u2014 new value for ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.annualBalanceIncreaseBPLimit"))),(0,i.kt)("h3",{id:"setsimulatedshareratedeviationbplimit"},"setSimulatedShareRateDeviationBPLimit()"),(0,i.kt)("p",null,"Sets the new value for the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.simulatedShareRateDeviationBPLimit")," variable."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Requires ",(0,i.kt)("inlineCode",{parentName:"li"},"SHARE_RATE_DEVIATION_LIMIT_MANAGER_ROLE")," to be granted to the caller."),(0,i.kt)("li",{parentName:"ul"},"Reverts with ",(0,i.kt)("inlineCode",{parentName:"li"},"IncorrectLimitValue()")," error when the passed value is out of the allowed range.\nSee ",(0,i.kt)("a",{parentName:"li",href:"#limits-list"},"Limits List")," section for details."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function setSimulatedShareRateDeviationBPLimit(uint256 _simulatedShareRateDeviationBPLimit)\n")),(0,i.kt)("h4",{id:"arguments-12"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_simulatedShareRateDeviationBPLimit"))," \u2014 new value for ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.simulatedShareRateDeviationBPLimit"))),(0,i.kt)("h3",{id:"setmaxexitrequestsperoraclereport"},"setMaxExitRequestsPerOracleReport()"),(0,i.kt)("p",null,"Sets the new value for the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.maxValidatorExitRequestsPerReport"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Requires ",(0,i.kt)("inlineCode",{parentName:"li"},"MAX_VALIDATOR_EXIT_REQUESTS_PER_REPORT_ROLE")," to be granted to the caller."),(0,i.kt)("li",{parentName:"ul"},"Reverts with ",(0,i.kt)("inlineCode",{parentName:"li"},"IncorrectLimitValue()")," error when the passed value is out of the allowed range.\nSee ",(0,i.kt)("a",{parentName:"li",href:"#limits-list"},"Limits List")," section for details."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function setMaxExitRequestsPerOracleReport(uint256 _maxValidatorExitRequestsPerReport)\n")),(0,i.kt)("h4",{id:"arguments-13"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_maxValidatorExitRequestsPerReport"))," \u2014 new value for ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.maxValidatorExitRequestsPerReport"))),(0,i.kt)("h3",{id:"setrequesttimestampmargin"},"setRequestTimestampMargin()"),(0,i.kt)("p",null,"Sets the new value for the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.requestTimestampMargin")," variable."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Requires ",(0,i.kt)("inlineCode",{parentName:"li"},"REQUEST_TIMESTAMP_MARGIN_MANAGER_ROLE")," to be granted to the caller."),(0,i.kt)("li",{parentName:"ul"},"Reverts with ",(0,i.kt)("inlineCode",{parentName:"li"},"IncorrectLimitValue()")," error when the passed value is out of the allowed range.\nSee ",(0,i.kt)("a",{parentName:"li",href:"#limits-list"},"Limits List")," section for details."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function setRequestTimestampMargin(uint256 _requestTimestampMargin)\n")),(0,i.kt)("h4",{id:"arguments-14"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_requestTimestampMargin"))," \u2014 new new value for ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.requestTimestampMargin"))),(0,i.kt)("h3",{id:"setmaxpositivetokenrebase"},"setMaxPositiveTokenRebase()"),(0,i.kt)("p",null,"Sets the new value for the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.maxPositiveTokenRebase")," variable."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Requires ",(0,i.kt)("inlineCode",{parentName:"li"},"MAX_POSITIVE_TOKEN_REBASE_MANAGER_ROLE")," to be granted to the caller."),(0,i.kt)("li",{parentName:"ul"},"Reverts with ",(0,i.kt)("inlineCode",{parentName:"li"},"IncorrectLimitValue()")," error when the passed value is out of the allowed range.\nSee ",(0,i.kt)("a",{parentName:"li",href:"#limits-list"},"Limits List")," section for details."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function setMaxPositiveTokenRebase(uint256 _maxPositiveTokenRebase)\n")),(0,i.kt)("h4",{id:"arguments-15"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_maxPositiveTokenRebase"))," \u2014 new value for ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.maxPositiveTokenRebase"))),(0,i.kt)("h3",{id:"setmaxaccountingextradatalistitemscount"},"setMaxAccountingExtraDataListItemsCount()"),(0,i.kt)("p",null,"Sets the new value for the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.maxAccountingExtraDataListItemsCount")," variable."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Requires ",(0,i.kt)("inlineCode",{parentName:"li"},"MAX_ACCOUNTING_EXTRA_DATA_LIST_ITEMS_COUNT_ROLE")," to be granted to the caller."),(0,i.kt)("li",{parentName:"ul"},"Reverts with ",(0,i.kt)("inlineCode",{parentName:"li"},"IncorrectLimitValue()")," error when the passed value is out of the allowed range.\nSee ",(0,i.kt)("a",{parentName:"li",href:"#limits-list"},"Limits List")," section for details."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function setMaxAccountingExtraDataListItemsCount(uint256 _maxAccountingExtraDataListItemsCount)\n")),(0,i.kt)("h4",{id:"arguments-16"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_maxAccountingExtraDataListItemsCount"))," \u2014 new value for ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.maxAccountingExtraDataListItemsCount"))),(0,i.kt)("h3",{id:"setmaxnodeoperatorsperextradataitemcount"},"setMaxNodeOperatorsPerExtraDataItemCount()"),(0,i.kt)("p",null,"Sets the new value for the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.maxNodeOperatorsPerExtraDataItemCount")," variable."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Requires ",(0,i.kt)("inlineCode",{parentName:"li"},"MAX_NODE_OPERATORS_PER_EXTRA_DATA_ITEM_COUNT_ROLE")," to be granted to the caller."),(0,i.kt)("li",{parentName:"ul"},"Reverts with ",(0,i.kt)("inlineCode",{parentName:"li"},"IncorrectLimitValue()")," error when the passed value is out of the allowed range.\nSee ",(0,i.kt)("a",{parentName:"li",href:"#limits-list"},"Limits List")," section for details."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function setMaxNodeOperatorsPerExtraDataItemCount(uint256 _maxNodeOperatorsPerExtraDataItemCount)\n")),(0,i.kt)("h4",{id:"arguments-17"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"_maxNodeOperatorsPerExtraDataItemCount"))," \u2014 new value for ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.maxNodeOperatorsPerExtraDataItemCount"))),(0,i.kt)("h2",{id:"permissions"},"Permissions"),(0,i.kt)("h3",{id:"all_limits_manager_role"},"ALL_LIMITS_MANAGER_ROLE()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'bytes32 public constant ALL_LIMITS_MANAGER_ROLE = keccak256("ALL_LIMITS_MANAGER_ROLE")\n')),(0,i.kt)("p",null,"Granting this role allows updating ",(0,i.kt)("strong",{parentName:"p"},"ANY")," value of the Limits List.\nSee ",(0,i.kt)("a",{parentName:"p",href:"#setoraclereportlimits"},(0,i.kt)("inlineCode",{parentName:"a"},"setOracleReportLimits()"))," method."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Grant this role with caution and give preference to the granular roles described below.")),(0,i.kt)("h3",{id:"churn_validators_per_day_limit_manager_role"},"CHURN_VALIDATORS_PER_DAY_LIMIT_MANAGER_ROLE()"),(0,i.kt)("p",null,"Granting this role allows updating the ",(0,i.kt)("inlineCode",{parentName:"p"},"churnValidatorsPerDayLimit")," value of the ",(0,i.kt)("a",{parentName:"p",href:"#limits-list"},"Limits List"),".\nSee the ",(0,i.kt)("a",{parentName:"p",href:"#setchurnvalidatorsperdaylimit"},(0,i.kt)("inlineCode",{parentName:"a"},"setChurnValidatorsPerDayLimit()"))," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'bytes32 public constant CHURN_VALIDATORS_PER_DAY_LIMIT_MANAGER_ROLE =\n    keccak256("CHURN_VALIDATORS_PER_DAY_LIMIT_MANAGER_ROLE")\n')),(0,i.kt)("h3",{id:"one_off_cl_balance_decrease_limit_manager_role"},"ONE_OFF_CL_BALANCE_DECREASE_LIMIT_MANAGER_ROLE()"),(0,i.kt)("p",null,"Granting this role allows updating the ",(0,i.kt)("inlineCode",{parentName:"p"},"annualBalanceIncreaseBPLimit")," value of the ",(0,i.kt)("a",{parentName:"p",href:"#limits-list"},"Limits List"),".\nSee the ",(0,i.kt)("a",{parentName:"p",href:"#setoneoffclbalancedecreasebplimit"},(0,i.kt)("inlineCode",{parentName:"a"},"setOneOffCLBalanceDecreaseBPLimit()"))," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'bytes32 public constant ONE_OFF_CL_BALANCE_DECREASE_LIMIT_MANAGER_ROLE =\n    keccak256("ONE_OFF_CL_BALANCE_DECREASE_LIMIT_MANAGER_ROLE")\n')),(0,i.kt)("h3",{id:"annual_balance_increase_limit_manager_role"},"ANNUAL_BALANCE_INCREASE_LIMIT_MANAGER_ROLE()"),(0,i.kt)("p",null,"Granting this role allows updating the ",(0,i.kt)("inlineCode",{parentName:"p"},"oneOffCLBalanceDecreaseBPLimit")," value of the ",(0,i.kt)("a",{parentName:"p",href:"#limits-list"},"Limits List"),".\nSee the ",(0,i.kt)("a",{parentName:"p",href:"#setannualbalanceincreasebplimit"},(0,i.kt)("inlineCode",{parentName:"a"},"setAnnualBalanceIncreaseBPLimit()"))," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'bytes32 public constant ANNUAL_BALANCE_INCREASE_LIMIT_MANAGER_ROLE =\n    keccak256("ANNUAL_BALANCE_INCREASE_LIMIT_MANAGER_ROLE")\n')),(0,i.kt)("h3",{id:"share_rate_deviation_limit_manager_role"},"SHARE_RATE_DEVIATION_LIMIT_MANAGER_ROLE()"),(0,i.kt)("p",null,"Granting this role allows updating the ",(0,i.kt)("inlineCode",{parentName:"p"},"simulatedShareRateDeviationBPLimit")," value of the ",(0,i.kt)("a",{parentName:"p",href:"#limits-list"},"Limits List"),".\nSee the ",(0,i.kt)("a",{parentName:"p",href:"#setsimulatedshareratedeviationbplimit"},(0,i.kt)("inlineCode",{parentName:"a"},"setSimulatedShareRateDeviationBPLimit()"))," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'bytes32 public constant SHARE_RATE_DEVIATION_LIMIT_MANAGER_ROLE =\n    keccak256("SHARE_RATE_DEVIATION_LIMIT_MANAGER_ROLE")\n')),(0,i.kt)("h3",{id:"max_validator_exit_requests_per_report_role"},"MAX_VALIDATOR_EXIT_REQUESTS_PER_REPORT_ROLE()"),(0,i.kt)("p",null,"Granting this role allows updating the ",(0,i.kt)("inlineCode",{parentName:"p"},"maxValidatorExitRequestsPerReport")," value of the ",(0,i.kt)("a",{parentName:"p",href:"#limits-list"},"Limits List"),".\nSee the ",(0,i.kt)("a",{parentName:"p",href:"#setmaxexitrequestsperoraclereport"},(0,i.kt)("inlineCode",{parentName:"a"},"setMaxExitRequestsPerOracleReport()"))," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'bytes32 public constant MAX_VALIDATOR_EXIT_REQUESTS_PER_REPORT_ROLE =\n    keccak256("MAX_VALIDATOR_EXIT_REQUESTS_PER_REPORT_ROLE")\n')),(0,i.kt)("h3",{id:"max_accounting_extra_data_list_items_count_role"},"MAX_ACCOUNTING_EXTRA_DATA_LIST_ITEMS_COUNT_ROLE()"),(0,i.kt)("p",null,"Granting this role allows updating the ",(0,i.kt)("inlineCode",{parentName:"p"},"maxAccountingExtraDataListItemsCount")," value of the ",(0,i.kt)("a",{parentName:"p",href:"#limits-list"},"Limits List"),".\nSee the ",(0,i.kt)("a",{parentName:"p",href:"#setmaxaccountingextradatalistitemscount"},(0,i.kt)("inlineCode",{parentName:"a"},"setMaxAccountingExtraDataListItemsCount()"))," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'bytes32 public constant MAX_ACCOUNTING_EXTRA_DATA_LIST_ITEMS_COUNT_ROLE =\n    keccak256("MAX_ACCOUNTING_EXTRA_DATA_LIST_ITEMS_COUNT_ROLE")\n')),(0,i.kt)("h3",{id:"max_node_operators_per_extra_data_item_count_role"},"MAX_NODE_OPERATORS_PER_EXTRA_DATA_ITEM_COUNT_ROLE()"),(0,i.kt)("p",null,"Granting this role allows updating the ",(0,i.kt)("inlineCode",{parentName:"p"},"maxNodeOperatorsPerExtraDataItemCount")," value of the ",(0,i.kt)("a",{parentName:"p",href:"#limits-list"},"Limits List"),".\nSee the ",(0,i.kt)("a",{parentName:"p",href:"#setmaxnodeoperatorsperextradataitemcount"},(0,i.kt)("inlineCode",{parentName:"a"},"setMaxNodeOperatorsPerExtraDataItemCount()"))," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'bytes32 public constant MAX_NODE_OPERATORS_PER_EXTRA_DATA_ITEM_COUNT_ROLE =\n    keccak256("MAX_NODE_OPERATORS_PER_EXTRA_DATA_ITEM_COUNT_ROLE")\n')),(0,i.kt)("h3",{id:"request_timestamp_margin_manager_role"},"REQUEST_TIMESTAMP_MARGIN_MANAGER_ROLE()"),(0,i.kt)("p",null,"Granting this role allows updating the ",(0,i.kt)("inlineCode",{parentName:"p"},"requestTimestampMargin")," value of the ",(0,i.kt)("a",{parentName:"p",href:"#limits-list"},"Limits List"),".\nSee the ",(0,i.kt)("a",{parentName:"p",href:"#setrequesttimestampmargin"},(0,i.kt)("inlineCode",{parentName:"a"},"setRequestTimestampMargin()"))," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'bytes32 public constant REQUEST_TIMESTAMP_MARGIN_MANAGER_ROLE\n    = keccak256("REQUEST_TIMESTAMP_MARGIN_MANAGER_ROLE")\n')),(0,i.kt)("h3",{id:"max_positive_token_rebase_manager_role"},"MAX_POSITIVE_TOKEN_REBASE_MANAGER_ROLE()"),(0,i.kt)("p",null,"Granting this role allows updating the ",(0,i.kt)("inlineCode",{parentName:"p"},"maxPositiveTokenRebase")," value of the ",(0,i.kt)("a",{parentName:"p",href:"#limits-list"},"Limits List"),".\nSee the ",(0,i.kt)("a",{parentName:"p",href:"#setmaxpositivetokenrebase"},(0,i.kt)("inlineCode",{parentName:"a"},"setMaxPositiveTokenRebase()"))," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'bytes32 public constant MAX_POSITIVE_TOKEN_REBASE_MANAGER_ROLE =\n    keccak256("MAX_POSITIVE_TOKEN_REBASE_MANAGER_ROLE")\n')),(0,i.kt)("h2",{id:"events"},"Events"),(0,i.kt)("h3",{id:"churnvalidatorsperdaylimitset"},"ChurnValidatorsPerDayLimitSet()"),(0,i.kt)("p",null,"Emits whenever the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.churnValidatorsPerDayLimit")," value is changed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"event ChurnValidatorsPerDayLimitSet(uint256 churnValidatorsPerDayLimit);\n")),(0,i.kt)("h4",{id:"arguments-18"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"churnValidatorsPerDayLimit"))," \u2014 new value of the ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.churnValidatorsPerDayLimit"))),(0,i.kt)("h3",{id:"oneoffclbalancedecreasebplimitset"},"OneOffCLBalanceDecreaseBPLimitSet()"),(0,i.kt)("p",null,"Emits whenever the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.oneOffCLBalanceDecreaseBPLimit")," value is changed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"event OneOffCLBalanceDecreaseBPLimitSet(uint256 oneOffCLBalanceDecreaseBPLimit);\n")),(0,i.kt)("h4",{id:"arguments-19"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"oneOffCLBalanceDecreaseBPLimit"))," \u2014 new value of the ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.oneOffCLBalanceDecreaseBPLimit"))),(0,i.kt)("h3",{id:"annualbalanceincreasebplimitset"},"AnnualBalanceIncreaseBPLimitSet()"),(0,i.kt)("p",null,"Emits whenever the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.annualBalanceIncreaseBPLimit")," value is changed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"event AnnualBalanceIncreaseBPLimitSet(uint256 annualBalanceIncreaseBPLimit);\n")),(0,i.kt)("h4",{id:"arguments-20"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"annualBalanceIncreaseBPLimit"))," \u2014 new value of the ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.annualBalanceIncreaseBPLimit"))),(0,i.kt)("h3",{id:"simulatedshareratedeviationbplimitset"},"SimulatedShareRateDeviationBPLimitSet()"),(0,i.kt)("p",null,"Emits whenever the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.simulatedShareRateDeviationBPLimit")," value is changed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"event SimulatedShareRateDeviationBPLimitSet(uint256 simulatedShareRateDeviationBPLimit);\n")),(0,i.kt)("h4",{id:"arguments-21"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"annualBalanceIncreaseBPLimit"))," \u2014 new value of the ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.simulatedShareRateDeviationBPLimit"))),(0,i.kt)("h3",{id:"maxpositivetokenrebaseset"},"MaxPositiveTokenRebaseSet()"),(0,i.kt)("p",null,"Emits whenever the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.maxPositiveTokenRebase")," value is changed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"event MaxPositiveTokenRebaseSet(uint256 maxPositiveTokenRebase);\n")),(0,i.kt)("h4",{id:"arguments-22"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"annualBalanceIncreaseBPLimit"))," \u2014 new value of the ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.maxPositiveTokenRebase"))),(0,i.kt)("h3",{id:"maxvalidatorexitrequestsperreportset"},"MaxValidatorExitRequestsPerReportSet()"),(0,i.kt)("p",null,"Emits whenever the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.maxValidatorExitRequestsPerReport")," value is changed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"event MaxValidatorExitRequestsPerReportSet(uint256 maxValidatorExitRequestsPerReport);\n")),(0,i.kt)("h4",{id:"arguments-23"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"maxValidatorExitRequestsPerReport"))," \u2014 new value of the ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.maxValidatorExitRequestsPerReport"))),(0,i.kt)("h3",{id:"maxaccountingextradatalistitemscountset"},"MaxAccountingExtraDataListItemsCountSet()"),(0,i.kt)("p",null,"Emits whenever the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.maxAccountingExtraDataListItemsCount")," value is changed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"event MaxAccountingExtraDataListItemsCountSet(uint256 maxAccountingExtraDataListItemsCount);\n")),(0,i.kt)("h4",{id:"arguments-24"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"maxAccountingExtraDataListItemsCount"))," \u2014 new value of the ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.maxAccountingExtraDataListItemsCount"))),(0,i.kt)("h3",{id:"maxnodeoperatorsperextradataitemcountset"},"MaxNodeOperatorsPerExtraDataItemCountSet()"),(0,i.kt)("p",null,"Emits whenever the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.maxNodeOperatorsPerExtraDataItemCount")," value is changed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"event MaxNodeOperatorsPerExtraDataItemCountSet(uint256 maxNodeOperatorsPerExtraDataItemCount);\n")),(0,i.kt)("h4",{id:"arguments-25"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"maxNodeOperatorsPerExtraDataItemCount"))," \u2014 new value of the ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.maxNodeOperatorsPerExtraDataItemCount"))),(0,i.kt)("h3",{id:"requesttimestampmarginset"},"RequestTimestampMarginSet()"),(0,i.kt)("p",null,"Emits whenever the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"LimitsList.requestTimestampMargin")," value is changed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"event RequestTimestampMarginSet(uint256 requestTimestampMargin);\n")),(0,i.kt)("h4",{id:"arguments-26"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"requestTimestampMargin"))," \u2014 new value of the ",(0,i.kt)("inlineCode",{parentName:"li"},"LimitsList.requestTimestampMargin"))))}d.isMDXComponent=!0}}]);