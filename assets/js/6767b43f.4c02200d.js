"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[17],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),s=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(r),h=n,m=p["".concat(c,".").concat(h)]||p[h]||u[h]||o;return r?a.createElement(m,i(i({ref:t},d),{},{components:r})):a.createElement(m,i({ref:t},d))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:n,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},7269:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const o={},i="WithdrawalsManagerStub",l={unversionedId:"contracts/withdrawals-manager-stub",id:"contracts/withdrawals-manager-stub",title:"WithdrawalsManagerStub",description:"- Source Code",source:"@site/docs/contracts/withdrawals-manager-stub.md",sourceDirName:"contracts",slug:"/contracts/withdrawals-manager-stub",permalink:"/contracts/withdrawals-manager-stub",editUrl:"https://github.com/lidofinance/docs/blob/main/docs/contracts/withdrawals-manager-stub.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"NodeOperatorsRegistry",permalink:"/contracts/node-operators-registry"},next:{title:"wstETH",permalink:"/contracts/wsteth"}},c=[],s={toc:c};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"withdrawalsmanagerstub"},"WithdrawalsManagerStub"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/lidofinance/withdrawals-manager-stub/blob/main/contracts/WithdrawalsManagerStub.sol"},"Source Code")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://etherscan.io/address/0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f"},"Deployed Contract"))),(0,n.kt)("p",null,"Though the Beacon chain already supports setting withdrawal credentials pointing to a smart contract,\nthe withdrawals specification is not yet final and might change before withdrawals are enabled in the Merge network.\nThis means that Lido cannot deploy the final implementation of the withdrawals manager contract yet.\nAt the same time, it's desirable to have withdrawal credentials pointing to a smart contract since this would\navoid the need to migrate a lot of validators to new withdrawal credentials once withdrawals are enabled."),(0,n.kt)("p",null,"To solve this, Lido uses a DAO-controlled upgradeable proxy, WithdrawalsManagerProxy.\nInitially, the proxy uses a stub implementation contract, WithdrawalsManagerStub, that cannot receive Ether.\nThe implementation can only be changed by LDO holders collectively by performing a DAO vote.\nLido DAO will vote for setting validator withdrawal credentials pointing to this proxy contract."),(0,n.kt)("p",null,"When Ethereum 2.0 withdrawals specification is finalized, Lido DAO will prepare the new implementation\ncontract and initiate a vote among LDO holders for upgrading this proxy to the new implementation."),(0,n.kt)("p",null,"Once withdrawals are enabled in Ethereum 2.0, Lido DAO members will start a vote among LDO holders for\ndisabling the upgradeability forever and locking the implementation by changing proxy admin from the DAO Voting contract\nto a zero address (which is an irreversible action)."))}d.isMDXComponent=!0}}]);