"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3450],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>k});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=d(a),m=l,k=u["".concat(s,".").concat(m)]||u[m]||p[m]||r;return a?n.createElement(k,i(i({ref:t},c),{},{components:a})):n.createElement(k,i({ref:t},c))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:l,i[1]=o;for(var d=2;d<r;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6836:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var n=a(3117),l=(a(7294),a(3905));const r={},i="OracleDaemonConfig",o={unversionedId:"contracts/oracle-daemon-config",id:"contracts/oracle-daemon-config",title:"OracleDaemonConfig",description:"- Source code",source:"@site/docs/contracts/oracle-daemon-config.md",sourceDirName:"contracts",slug:"/contracts/oracle-daemon-config",permalink:"/contracts/oracle-daemon-config",draft:!1,editUrl:"https://github.com/lidofinance/docs/blob/main/docs/contracts/oracle-daemon-config.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"OracleReportSanityChecker",permalink:"/contracts/oracle-report-sanity-checker"},next:{title:"StakingRouter",permalink:"/contracts/staking-router"}},s={},d=[{value:"View methods",id:"view-methods",level:2},{value:"get(string calldata _key)",id:"getstring-calldata-_key",level:3},{value:"getList(string[] calldata _keys)",id:"getliststring-calldata-_keys",level:3},{value:"Methods",id:"methods",level:2},{value:"set(string calldata _key, bytes calldata _value)",id:"setstring-calldata-_key-bytes-calldata-_value",level:3},{value:"update(string calldata _key, bytes calldata _value)",id:"updatestring-calldata-_key-bytes-calldata-_value",level:3},{value:"unset(string calldata _key)",id:"unsetstring-calldata-_key",level:3},{value:"Events",id:"events",level:2},{value:"ConfigValueSet",id:"configvalueset",level:3},{value:"ConfigValueUpdated",id:"configvalueupdated",level:3},{value:"ConfigValueUnset",id:"configvalueunset",level:3}],c={toc:d},u="wrapper";function p(e){let{components:t,...a}=e;return(0,l.kt)(u,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"oracledaemonconfig"},"OracleDaemonConfig"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/lidofinance/lido-dao/blob/master/contracts/0.8.9/OracleDaemonConfig.sol"},"Source code")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://etherscan.io/address/0xbf05A929c3D7885a6aeAd833a992dA6E5ac23b09"},"Deployed contract"))),(0,l.kt)("p",null,"OracleDaemonConfig acts as a parameters registry for the Lido oracle daemon.\nThe full list of params are provided in the Lido V2 mainnet parameters ",(0,l.kt)("a",{parentName:"p",href:"/guides/verify-lido-v2-upgrade-manual#oracledaemonconfig"},"guide"),"."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"In contrast to ",(0,l.kt)("a",{parentName:"p",href:"/contracts/oracle-report-sanity-checker"},(0,l.kt)("inlineCode",{parentName:"a"},"OracleReportSanityChecker")),", the stored values aren't enforced by the protocol on-chain code.")),(0,l.kt)("h2",{id:"view-methods"},"View methods"),(0,l.kt)("h3",{id:"getstring-calldata-_key"},"get(string calldata _key)"),(0,l.kt)("p",null,"Retrieves the value corresponding to the provided key."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function get(string calldata _key) external view returns (bytes memory)\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Reverts if value is missing.")),(0,l.kt)("h3",{id:"getliststring-calldata-_keys"},"getList(string[] calldata _keys)"),(0,l.kt)("p",null,"Retrieves a list of values corresponding to the provided keys."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function getList(string[] calldata _keys) external view returns (bytes[] memory)\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Reverts if any value for a specific key is missing.")),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("h3",{id:"setstring-calldata-_key-bytes-calldata-_value"},"set(string calldata _key, bytes calldata _value)"),(0,l.kt)("p",null,"Sets the value for the provided key. Can only be called by users with ",(0,l.kt)("inlineCode",{parentName:"p"},"CONFIG_MANAGER_ROLE"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function set(string calldata _key, bytes calldata _value) external\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Reverts if any of the following is true:"),(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"value with provided key already exists"),(0,l.kt)("li",{parentName:"ul"},"value is empty"),(0,l.kt)("li",{parentName:"ul"},"called by someone who doesn't have ",(0,l.kt)("inlineCode",{parentName:"li"},"CONFIG_MANAGER_ROLE")," role"))),(0,l.kt)("h3",{id:"updatestring-calldata-_key-bytes-calldata-_value"},"update(string calldata _key, bytes calldata _value)"),(0,l.kt)("p",null,"Updates the value for the provided key. Can only be called by users with ",(0,l.kt)("inlineCode",{parentName:"p"},"CONFIG_MANAGER_ROLE"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function update(string calldata _key, bytes calldata _value) external\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Reverts if any of the following is true:"),(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"value with provided key doesn't exist"),(0,l.kt)("li",{parentName:"ul"},"value is the same with the one already set"),(0,l.kt)("li",{parentName:"ul"},"value is empty"),(0,l.kt)("li",{parentName:"ul"},"called by someone who doesn't have ",(0,l.kt)("inlineCode",{parentName:"li"},"CONFIG_MANAGER_ROLE")," role"))),(0,l.kt)("h3",{id:"unsetstring-calldata-_key"},"unset(string calldata _key)"),(0,l.kt)("p",null,"Removes the value of the provided key. Can only be called by users with ",(0,l.kt)("inlineCode",{parentName:"p"},"CONFIG_MANAGER_ROLE"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function unset(string calldata _key) external\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Reverts if any of the following is true:"),(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"value with provided key doesn't exist"),(0,l.kt)("li",{parentName:"ul"},"called by someone who doesn't have ",(0,l.kt)("inlineCode",{parentName:"li"},"CONFIG_MANAGER_ROLE")," role"))),(0,l.kt)("h2",{id:"events"},"Events"),(0,l.kt)("h3",{id:"configvalueset"},"ConfigValueSet"),(0,l.kt)("p",null,"Emitted when a new key-value pair is set."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ConfigValueSet(string indexed key, bytes value)\n")),(0,l.kt)("h3",{id:"configvalueupdated"},"ConfigValueUpdated"),(0,l.kt)("p",null,"Emitted when a key-value pair is updated."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ConfigValueUpdated(string indexed key, bytes value)\n")),(0,l.kt)("h3",{id:"configvalueunset"},"ConfigValueUnset"),(0,l.kt)("p",null,"Emitted when a key-value pair is unset."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event ConfigValueUnset(string indexed key)\n")))}p.isMDXComponent=!0}}]);