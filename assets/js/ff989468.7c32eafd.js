(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{90:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(3),o=n(7),r=(n(0),n(94)),i={},s={unversionedId:"guides/node-operator-manual",id:"guides/node-operator-manual",isDocsHomePage:!1,title:"Node Operator Manual",description:"This document is intended for those who wish to participate in the Lido protocol as Node Operators\u2014entities",source:"@site/docs/guides/node-operator-manual.md",sourceDirName:"guides",slug:"/guides/node-operator-manual",permalink:"/guides/node-operator-manual",editUrl:"https://github.com/lidofinance/docs/blob/main/docs/guides/node-operator-manual.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Lido DAO",permalink:"/lido-dao"},next:{title:"Oracle Operator Manual",permalink:"/guides/oracle-operator-manual"}},c=[{value:"General overview",id:"general-overview",children:[{value:"The fee",id:"the-fee",children:[]}]},{value:"Operations HOWTO",id:"operations-howto",children:[{value:"Expressing interest to the DAO holders",id:"expressing-interest-to-the-dao-holders",children:[]},{value:"Generating signing keys",id:"generating-signing-keys",children:[]},{value:"Submitting the keys",id:"submitting-the-keys",children:[]},{value:"Importing the keys to a Lighthouse validator client",id:"importing-the-keys-to-a-lighthouse-validator-client",children:[]}]}],l={toc:c};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This document is intended for those who wish to participate in the Lido protocol as Node Operators\u2014entities\nwho run Beacon validator nodes on behalf of the protocol and receive fee in return. It consists of\ntwo sections: ",Object(r.b)("a",{parentName:"p",href:"#general-overview"},"General overview")," and ",Object(r.b)("a",{parentName:"p",href:"#operations-howto"},"Operations HOWTO"),".\nIf you\u2019re here for the technical details of interacting with the protocol, feel free to skip to\nthe latter."),Object(r.b)("h2",{id:"general-overview"},"General overview"),Object(r.b)("p",null,"Node Operators manage a secure and stable infrastructure for running Beacon validator clients\nfor the benefit of the protocol. They\u2019re professional staking providers who can ensure the safety\nof funds belonging to the protocol users and correctness of validator operations."),Object(r.b)("p",null,"The general flow is the following:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"A Node Operator expresses their interest to the DAO members. Their address gets proposed to the DAO vote for inclusion to the DAO's Node Operator list. Note that the Node Operator address should be supplied to the DAO with zero signing keys limit.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"The DAO votes for including the Operator to the list of active operators. After successful\nvoting for inclusion, the Node Operator becomes active.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"The Node Operator generates and submits a set of signing public keys and associated signatures\nfor future validators that will be managed by the Operator. When generating the signatures, the\nOperator must use the withdrawal credentials supplied by the DAO.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"The DAO members check the submitted keys for correctness and, if everything\u2019s good, vote for\napproving them. After successful approval, the keys become usable by the protocol.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"The protocol distributes the pooled Ether evenly between all active Node Operators in ",Object(r.b)("inlineCode",{parentName:"p"},"32 Ether"),"\nchunks. When it assigns the next deposit to a Node Operator, it takes the first non-used signing\nkey, as well as the accociated signature, from the Node Operator\u2019s usable set and performs\na deposit to the official ",Object(r.b)("inlineCode",{parentName:"p"},"DepositContract"),", submitting the pooled funds. At that time, the Node\nOperator should have the validator already running and configured with the public key being used.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"From this point, the Node Operator is responsible for keeping the validator associated with\nthe signing key operable and well-behaving.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"The protocol includes Oracles that periodically report the combined Beacon balance of all\nvalidators launched by the protocol. When the balance increases as a result of Beacon chain\nrewards, a fee is taken from the amount of rewards (see below for the details on how the fee\nis nominated) and distributed between active Node Operators."))),Object(r.b)("h3",{id:"the-fee"},"The fee"),Object(r.b)("p",null,"The fee is taken as a percentage from Beacon chain rewards at the moment the Oracles report\nthose rewards. Oracles do that once in a while\u2014the exact period is decided by the DAO members\nvia the voting process."),Object(r.b)("p",null,"The total fee percentage, as well as the percentage that goes to all Node Operators, is also decided\nby the DAO voting and can be changed during the lifetime of the DAO. The Node Operators\u2019 part of the\nfee is distributed between the active Node Operators proportionally to the number of validators that\neach Node Operator runs."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"For example, if Oracles report that the protocol has received 10 Ether as a reward, the fee\npercentage that goes to Operators is ",Object(r.b)("inlineCode",{parentName:"p"},"10%"),", and there are two active Node Operators, running\n",Object(r.b)("inlineCode",{parentName:"p"},"2")," and ",Object(r.b)("inlineCode",{parentName:"p"},"8")," validators, respectively, then the first operator will receive ",Object(r.b)("inlineCode",{parentName:"p"},"0.2")," StETH, the\nsecond \u2014 ",Object(r.b)("inlineCode",{parentName:"p"},"0.8")," StETH.")),Object(r.b)("p",null,"The fee is nominated in StETH, a liquid version of ETH2 token introduced by the Lido protocol. The\ntokens correspond 1:1 to the Ether that the token holder would be able get by burning their StETH\nif transfers were already enabled in the Beacon chain. At any time point, the total amount of StETH\ntokens is equal to the total amount of Ether controlled by the protocol on both ETH1 and ETH2 sides."),Object(r.b)("p",null,"When a user submits Ether to the pool, they get the same amount of freshly-minted StETH tokens.\nWhen reward is received on the ETH2 side, each StETH holder\u2019s balance increases by the same\npercentage that the total amount of protocol-controlled Ether has increased, corrected for the\nprotocol fee which is taken by ",Object(r.b)("a",{parentName:"p",href:"https://github.com/lidofinance/lido-dao/blob/971ac8f/contracts/0.4.24/Lido.sol#L576"},"minting new StETH tokens")," to the fee recipients."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"For example, if the reward has increased the total amount of protocol-controlled Ether by ",Object(r.b)("inlineCode",{parentName:"p"},"10%"),",\nand the total protocol fee percentage is ",Object(r.b)("inlineCode",{parentName:"p"},"10%"),", then each token holder\u2019s balance will grow by\napproximately ",Object(r.b)("inlineCode",{parentName:"p"},"9.09%"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"10%")," of the reward will be forwarded to the treasury, insurance fund\nand Node Operators.")),Object(r.b)("p",null,"One side effect of this is that you, as a Node Operator, will continue receiving the percentage\nof protocol rewards even after you stop actively validating, if you chose to hold StETH received\nas a fee."),Object(r.b)("h2",{id:"operations-howto"},"Operations HOWTO"),Object(r.b)("p",null,"Becoming a Lido Node Operator involves several steps, all of which are detailed below."),Object(r.b)("h3",{id:"expressing-interest-to-the-dao-holders"},"Expressing interest to the DAO holders"),Object(r.b)("p",null,"To include a Node Operator to the protocol, DAO holders must perform a voting. A Node Operator\nis defined by an address that is used for two purposes:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"The protocol pays the fee by minting StETH tokens to this address."),Object(r.b)("li",{parentName:"ol"},"The Node Operator uses this address for submitting signing keys to be used by the protocol.")),Object(r.b)("p",null,"Pass this address to the DAO holders along with the other relevant information."),Object(r.b)("h3",{id:"generating-signing-keys"},"Generating signing keys"),Object(r.b)("p",null,"Upon inclusion into the protocol, a Node Operator should generate and submit a set of ",Object(r.b)("a",{parentName:"p",href:"https://ethresear.ch/t/pragmatic-signature-aggregation-with-bls/2105"},"BLS12-381"),"\npublic keys that will be used by the protocol for making Beacon deposits. Along with the keys,\na Node Operator submits a set of the corresponding signatures ",Object(r.b)("a",{parentName:"p",href:"https://github.com/ethereum/annotated-spec/blob/master/phase0/beacon-chain.md#depositmessage"},"as defined in the spec"),". The\n",Object(r.b)("inlineCode",{parentName:"p"},"DepositMessage")," used for generating the signature must be the following:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"pubkey")," must be derived from the private key used for signing the message;"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"amount")," must equal to 32 Ether;"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"withdrawal_credentials")," must equal to the protocol credentials set by the DAO.")),Object(r.b)("p",null,"The fork version used for generating the signature must correspond to the fork version of the Beacon\nchain the instance of Lido protocol is targeted to."),Object(r.b)("p",null,"You can obtain the protocol withdrawal credentials by calling ",Object(r.b)("a",{parentName:"p",href:"https://github.com/lidofinance/lido-dao/blob/971ac8f/contracts/0.4.24/Lido.sol#L312"},Object(r.b)("inlineCode",{parentName:"a"},"Lido.getWithdrawalCredentials()")),".\nOn the ",Object(r.b)("a",{parentName:"p",href:"https://goerli.etherscan.io/address/0x1643E812aE58766192Cf7D2Cf9567dF2C37e9B7F#readProxyContract"},"Etherscan page for the Prater-deployed Lido"),", it\u2019s the field number 19. The ABI of the\n",Object(r.b)("inlineCode",{parentName:"p"},"Lido")," contract can be found in ",Object(r.b)("a",{parentName:"p",href:"https://github.com/lidofinance/lido-dao/blob/971ac8f/lib/abi/Lido.json"},Object(r.b)("inlineCode",{parentName:"a"},"lib/abi/Lido.json")),"."),Object(r.b)("h4",{id:"using-the-forked-eth20-deposit-cli"},"Using the forked eth2.0-deposit-cli"),Object(r.b)("p",null,"In a testnet environment, you can use ",Object(r.b)("a",{parentName:"p",href:"https://github.com/lidofinance/eth2.0-deposit-cli"},"a fork of ",Object(r.b)("inlineCode",{parentName:"a"},"eth2.0-deposit-cli"))," which is also published to the\nDocker Hub as ",Object(r.b)("a",{parentName:"p",href:"https://hub.docker.com/repository/docker/lidofinance/deposit-cli"},Object(r.b)("inlineCode",{parentName:"a"},"lidofinance/deposit-cli")),". It is modified to support passing a pre-defined withdrawal\npublic key instead of generating new one. The withdrawal public key is not currently accessible on\nthe ",Object(r.b)("inlineCode",{parentName:"p"},"Lido")," contract instance, but you can get the key from one of the DAO holders and verify that it\nmatches the withdrawal credentials obtained from the ",Object(r.b)("inlineCode",{parentName:"p"},"Lido")," contract instance."),Object(r.b)("p",null,"To generate the keys and signatures, run the following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-sh"},'docker run -it --rm -v "$(pwd):/data" lidofinance/deposit-cli \\\n  new-mnemonic \\\n  --folder /data \\\n  --chain="$CHAIN_NAME" \\\n  --withdrawal_credentials="$WITHDRAWAL_CREDENTIALS"\n')),Object(r.b)("p",null,"Here, ",Object(r.b)("inlineCode",{parentName:"p"},"CHAIN_NAME")," is one of the public Beacon chain names (run the container with the ",Object(r.b)("inlineCode",{parentName:"p"},"--help")," flag\nto see the possible values) and ",Object(r.b)("inlineCode",{parentName:"p"},"WITHDRAWAL_CREDENTIALS")," is the withdrawal credentials\nfrom the protocol documentation."),Object(r.b)("p",null,"As a result of running this, the ",Object(r.b)("inlineCode",{parentName:"p"},"validator_keys")," directory will be created in the current working\ndirectory. It will contain a deposit data file named ",Object(r.b)("inlineCode",{parentName:"p"},"deposit-data-*.json")," and a number of private key\nstores named ",Object(r.b)("inlineCode",{parentName:"p"},"keystore-*.json"),", the latter encrypted with the password you were asked for when running\nthe command."),Object(r.b)("p",null,"If you chose to use the UI for submitting the keys, you\u2019ll need to pass the JSON data found in the\ndeposit data file to the protocol (see the next section). If you wish, you can remove any other\nfields except ",Object(r.b)("inlineCode",{parentName:"p"},"pubkey")," and ",Object(r.b)("inlineCode",{parentName:"p"},"signature")," from the array items."),Object(r.b)("p",null,"Never share the generated mnemonic and your private keys with anyone, including the protocol members\nand DAO holders."),Object(r.b)("h3",{id:"submitting-the-keys"},"Submitting the keys"),Object(r.b)("p",null,"After generating the keys, a Node Operator submits them to the protocol. To do this, they send a\ntransaction from the Node Operator\u2019s withdrawa address to the ",Object(r.b)("inlineCode",{parentName:"p"},"NodeOperatorsRegistry")," contract\ninstance, calling ",Object(r.b)("a",{parentName:"p",href:"https://github.com/lidofinance/lido-dao/blob/971ac8f/contracts/0.4.24/nos/NodeOperatorsRegistry.sol#L250"},Object(r.b)("inlineCode",{parentName:"a"},"addSigningKeysOperatorBH")," function")," and with the following arguments:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"* `uint256 _operator_id` the zero-based sequence number of the operator in the list.\n* `uint256 _quantity` the number of keys being submitted.\n* `bytes _pubkeys` the concatenated keys.\n* `bytes _signatures` the concatenated signatures.\n")),Object(r.b)("p",null,"The address of the ",Object(r.b)("inlineCode",{parentName:"p"},"NodeOperatorsRegistry")," contract instance can be obtained by calling the\n",Object(r.b)("a",{parentName:"p",href:"https://github.com/lidofinance/lido-dao/blob/971ac8f/contracts/0.4.24/Lido.sol#L361"},Object(r.b)("inlineCode",{parentName:"a"},"getOperators()")," function")," on the ",Object(r.b)("inlineCode",{parentName:"p"},"Lido")," contract instance. The ABI of the ",Object(r.b)("inlineCode",{parentName:"p"},"NodeOperatorsRegistry"),"\ncontract can be found in ",Object(r.b)("a",{parentName:"p",href:"https://github.com/lidofinance/lido-dao/blob/971ac8f/lib/abi/NodeOperatorsRegistry.json"},Object(r.b)("inlineCode",{parentName:"a"},"lib/abi/NodeOperatorsRegistry.json")),"."),Object(r.b)("p",null,"Operator ID for a given reward address can be obtained by successively calling\n",Object(r.b)("a",{parentName:"p",href:"https://github.com/lidofinance/lido-dao/blob/971ac8f/contracts/0.4.24/nos/NodeOperatorsRegistry.sol#L335"},Object(r.b)("inlineCode",{parentName:"a"},"NodeOperatorsRegistry.getNodeOperator"))," with the increasing ",Object(r.b)("inlineCode",{parentName:"p"},"_id")," argument until you get the\noperator with the matching ",Object(r.b)("inlineCode",{parentName:"p"},"rewardAddress"),"."),Object(r.b)("p",null,"Etherscan pages for the G\xf6rli/Prater contracts:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://goerli.etherscan.io/address/0x1643E812aE58766192Cf7D2Cf9567dF2C37e9B7F#readProxyContract"},Object(r.b)("inlineCode",{parentName:"a"},"Lido"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://goerli.etherscan.io/address/0x9D4AF1Ee19Dad8857db3a45B0374c81c8A1C6320"},Object(r.b)("inlineCode",{parentName:"a"},"NodeOperatorsRegistry")))),Object(r.b)("h4",{id:"using-the-key-submitter-ui"},"Using the key submitter UI"),Object(r.b)("p",null,"Lido has the specialized ","[web interface for submitting the keys]","."),Object(r.b)("img",{width:"1280",alt:"image",src:"https://user-images.githubusercontent.com/4445523/113226738-8b522480-9299-11eb-84eb-186bb6f198dc.png"}),Object(r.b)("p",null,"Prepare a JSON data of the following structure and paste it to the textarea that will appear in the center of the screen:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},";[\n  {\n    pubkey: 'PUBLIC_KEY_1',\n    signature: 'SIGNATURE_1',\n  },\n  {\n    pubkey: 'PUBLIC_KEY_2',\n    signature: 'SIGNATURE_2',\n  },\n  // ... etc.\n]\n")),Object(r.b)("p",null,"If you\u2019ve used the forked ",Object(r.b)("inlineCode",{parentName:"p"},"eth2.0-deposit-cli"),", you can paste the content of the generated\n",Object(r.b)("inlineCode",{parentName:"p"},"deposit-data-*.json")," file as-is."),Object(r.b)("p",null,"Click ",Object(r.b)("inlineCode",{parentName:"p"},"Check")," button, and then the interface would run required checks connect the MetaMask and click ",Object(r.b)("inlineCode",{parentName:"p"},"Submit")," button."),Object(r.b)("p",null,"Once the keys are submitted, Node Operators can check whether the supplied keys are valid with the ","[web interface for checking the submitted keys]",". If the keys are valid, they can vote for increasing the key limit for the Node Operator."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://stake.testnet.lido.fi/key-checker/submit"},"web interface for submitting the keys")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://stake.testnet.lido.fi/key-checker/existing"},"web interface for checking the submitted keys"))),Object(r.b)("h4",{id:"using-the-aragon-ui"},"Using the Aragon UI"),Object(r.b)("p",null,"Alternatively, you can use the Node Operators Registry app UI for submitting the keys. For the\nG\xf6rli/Prater deployment, you can find it here:"),Object(r.b)("p",null,Object(r.b)("a",{parentName:"p",href:"https://testnet.lido.fi/#/lido-testnet-prater/0x9d4af1ee19dad8857db3a45b0374c81c8a1c6320/"},"https://testnet.lido.fi/#/lido-testnet-prater/0x9d4af1ee19dad8857db3a45b0374c81c8a1c6320/")),Object(r.b)("p",null,"Make sure you\u2019re using a browser that exposes a Web3 provider allowing to sign transactions on\nbehalf of the Node Operator\u2019s reward address. Press the Connect account button in the top-right and\nallow the access to the account associated with the reward address. Then, find yourself in the\nlist of Node Operators \u2014 the corresponding item will be suffixed by ",Object(r.b)("inlineCode",{parentName:"p"},"(you)"),":"),Object(r.b)("img",{width:"1124",alt:"add-signing-keys-1",src:"https://user-images.githubusercontent.com/1699593/100355848-7f143d00-3003-11eb-9d63-94630e059eb8.png"}),Object(r.b)("p",null,"Then, press the ",Object(r.b)("inlineCode",{parentName:"p"},"...")," button on the right of the item and select ",Object(r.b)("inlineCode",{parentName:"p"},"add my signing keys"),":"),Object(r.b)("img",{width:"1123",alt:"add-signing-keys-2",src:"https://user-images.githubusercontent.com/1699593/100355837-7d4a7980-3003-11eb-84ae-02a71f9ed2ec.png"}),Object(r.b)("p",null,"Prepare a JSON data of the following structure and paste it to the ",Object(r.b)("inlineCode",{parentName:"p"},"JSON")," field in the side panel\nthat will appear on the right:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},";[\n  {\n    pubkey: 'PUBLIC_KEY_1',\n    signature: 'SIGNATURE_1',\n  },\n  {\n    pubkey: 'PUBLIC_KEY_2',\n    signature: 'SIGNATURE_2',\n  },\n  // ... etc.\n]\n")),Object(r.b)("p",null,"If you\u2019ve used the forked ",Object(r.b)("inlineCode",{parentName:"p"},"eth2.0-deposit-cli"),", you can paste the content of the generated\n",Object(r.b)("inlineCode",{parentName:"p"},"deposit-data-*.json")," file as-is."),Object(r.b)("p",null,"Then, press ",Object(r.b)("inlineCode",{parentName:"p"},"Add signing keys")," and sign the transaction. Wait for it to be included in a block,\nrefresh the page and make sure that the number in the ",Object(r.b)("inlineCode",{parentName:"p"},"Total")," field corresponds to the number\nof the keys you\u2019ve just submitted:"),Object(r.b)("img",{width:"1125",alt:"add-signing-keys-3",src:"https://user-images.githubusercontent.com/1699593/100355828-7ae81f80-3003-11eb-9d04-d29ae57c0904.png"}),Object(r.b)("h3",{id:"importing-the-keys-to-a-lighthouse-validator-client"},"Importing the keys to a Lighthouse validator client"),Object(r.b)("p",null,"If you\u2019ve used the forked ",Object(r.b)("inlineCode",{parentName:"p"},"eth2.0-deposit-cli")," to generate the keys, you can import them to a\nLighthouse validator client by running this command:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-sh"},'docker run --rm -it \\\n  --name validator_keys_import \\\n  -v "$KEYS_DIR":/root/validator_keys \\\n  -v "$DATA_DIR":/root/.lighthouse \\\n  sigp/lighthouse \\\n  lighthouse account validator import \\\n  --reuse-password \\\n  --network "$TESTNET_NAME" \\\n  --datadir /root/.lighthouse/data \\\n  --directory /root/validator_keys\n')))}d.isMDXComponent=!0},94:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),d=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=d(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},h=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=d(n),h=a,u=b["".concat(i,".").concat(h)]||b[h]||p[h]||r;return n?o.a.createElement(u,s(s({ref:t},l),{},{components:n})):o.a.createElement(u,s({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);