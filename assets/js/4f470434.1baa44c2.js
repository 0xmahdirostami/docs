"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9490],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>h});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=r.createContext({}),c=function(e){var t=r.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=c(a),m=n,h=u["".concat(d,".").concat(m)]||u[m]||p[m]||l;return a?r.createElement(h,o(o({ref:t},s),{},{components:a})):r.createElement(h,o({ref:t},s))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[u]="string"==typeof e?e:n,o[1]=i;for(var c=2;c<l;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7894:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var r=a(3117),n=(a(7294),a(3905));const l={},o="WithdrawalVault",i={unversionedId:"contracts/withdrawal-vault",id:"contracts/withdrawal-vault",title:"WithdrawalVault",description:"- Source Code",source:"@site/docs/contracts/withdrawal-vault.md",sourceDirName:"contracts",slug:"/contracts/withdrawal-vault",permalink:"/contracts/withdrawal-vault",draft:!1,editUrl:"https://github.com/lidofinance/docs/blob/main/docs/contracts/withdrawal-vault.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"WithdrawalQueueERC721",permalink:"/contracts/withdrawal-queue-erc721"},next:{title:"wstETH",permalink:"/contracts/wsteth"}},d={},c=[{value:"What is WithdrawalVault",id:"what-is-withdrawalvault",level:2},{value:"View methods",id:"view-methods",level:2},{value:"getContractVersion()",id:"getcontractversion",level:3},{value:"Methods",id:"methods",level:2},{value:"withdrawWithdrawals()",id:"withdrawwithdrawals",level:3},{value:"recoverERC20()",id:"recovererc20",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"recoverERC721()",id:"recovererc721",level:3},{value:"Parameters:",id:"parameters-1",level:4}],s={toc:c},u="wrapper";function p(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,r.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"withdrawalvault"},"WithdrawalVault"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/lidofinance/lido-dao/blob/master/contracts/0.8.9/WithdrawalVault.sol"},"Source Code")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://etherscan.io/address/0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f"},"Deployed Contract"))),(0,n.kt)("h2",{id:"what-is-withdrawalvault"},"What is WithdrawalVault"),(0,n.kt)("p",null,"A simple contract that accumulates partial and full withdrawals that comes from\nthe Beacon Chain. Its address corresponds to the type-0x01 Lido withdrawal credentials.\nDuring the accounting oracle report, the vault is emptied by Lido to the internal buffer; see ",(0,n.kt)("a",{parentName:"p",href:"/contracts/lido#oracle-report"},"Lido contract docs")," for details."),(0,n.kt)("p",null,"The vault is recoverable, so any ERC-20 and ERC-721 tokens can be transferred to the treasury by DAO."),(0,n.kt)("p",null,"The currently deployed version is upgradable because of anticipated Ethereum withdrawal mechanics changes."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"The contract is meant to be ossified somewhere after withdrawal credentials triggerable exits are implemented.")),(0,n.kt)("h2",{id:"view-methods"},"View methods"),(0,n.kt)("h3",{id:"getcontractversion"},"getContractVersion()"),(0,n.kt)("p",null,"Returns the current contract version."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sol"},"function getContractVersion() returns (uint256)\n")),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"withdrawwithdrawals"},"withdrawWithdrawals()"),(0,n.kt)("p",null,"Transfer the ",(0,n.kt)("inlineCode",{parentName:"p"},"_amount")," of accumulated withdrawals to the Lido contract."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"It can be called only by the ",(0,n.kt)("a",{parentName:"p",href:"/contracts/lido"},"Lido")," contract.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sol"},"function withdrawWithdrawals(uint256 _amount)\n")),(0,n.kt)("h3",{id:"recovererc20"},"recoverERC20()"),(0,n.kt)("p",null,"Transfers the given amount of the ERC20-token (defined by the provided token contract address)\ncurrently belonging to the vault contract address to the Lido treasury address."),(0,n.kt)("p",null,"Emits a ",(0,n.kt)("inlineCode",{parentName:"p"},"ERC20Recovered")," event."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sol"},"function recoverERC20(address _token, uint256 _amount) external\n")),(0,n.kt)("h4",{id:"parameters"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"_token")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"address")),(0,n.kt)("td",{parentName:"tr",align:null},"ERC20-compatible token")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"_amount")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"uint256")),(0,n.kt)("td",{parentName:"tr",align:null},"token amount to recover")))),(0,n.kt)("h3",{id:"recovererc721"},"recoverERC721()"),(0,n.kt)("p",null,"Transfers the given tokenId of the ERC721-compatible NFT (defined by the provided token contract address)\ncurrently belonging to the vault contract address to the Lido treasury address."),(0,n.kt)("p",null,"Emits the ",(0,n.kt)("inlineCode",{parentName:"p"},"ERC721Recovered")," event."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sol"},"function recoverERC721(address _token, uint256 _tokenId) external\n")),(0,n.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"_token")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"address")),(0,n.kt)("td",{parentName:"tr",align:null},"ERC721-compatible token")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"_tokenId")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"uint256")),(0,n.kt)("td",{parentName:"tr",align:null},"minted token id")))))}p.isMDXComponent=!0}}]);