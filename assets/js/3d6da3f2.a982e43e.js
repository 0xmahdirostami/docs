"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5558],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>k});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var d=a.createContext({}),c=function(e){var t=a.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),s=c(r),m=n,k=s["".concat(d,".").concat(m)]||s[m]||u[m]||l;return r?a.createElement(k,o(o({ref:t},p),{},{components:r})):a.createElement(k,o({ref:t},p))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,o=new Array(l);o[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[s]="string"==typeof e?e:n,o[1]=i;for(var c=2;c<l;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4924:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var a=r(7462),n=(r(7294),r(3905));const l={},o="LidoExecutionLayerRewardsVault",i={unversionedId:"contracts/lido-execution-layer-rewards-vault",id:"contracts/lido-execution-layer-rewards-vault",title:"LidoExecutionLayerRewardsVault",description:"- Source Code",source:"@site/docs/contracts/lido-execution-layer-rewards-vault.md",sourceDirName:"contracts",slug:"/contracts/lido-execution-layer-rewards-vault",permalink:"/contracts/lido-execution-layer-rewards-vault",editUrl:"https://github.com/lidofinance/docs/blob/main/docs/contracts/lido-execution-layer-rewards-vault.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"CompositePostRebaseBeaconReceiver",permalink:"/contracts/composite-post-rebase-beacon-receiver"},next:{title:"MevBoostRelayAllowedList",permalink:"/contracts/mev-boost-relays-allowed-list"}},d=[{value:"Methods",id:"methods",children:[{value:"receive()",id:"receive",children:[],level:3},{value:"withdrawRewards()",id:"withdrawrewards",children:[{value:"Parameters:",id:"parameters",children:[],level:4}],level:3},{value:"recoverERC20()",id:"recovererc20",children:[{value:"Parameters:",id:"parameters-1",children:[],level:4}],level:3},{value:"recoverERC721()",id:"recovererc721",children:[{value:"Parameters:",id:"parameters-2",children:[],level:4}],level:3}],level:2}],c={toc:d};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"lidoexecutionlayerrewardsvault"},"LidoExecutionLayerRewardsVault"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/lidofinance/lido-dao/blob/develop/contracts/0.8.9/LidoExecutionLayerRewardsVault.sol"},"Source Code")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://etherscan.io/address/0x388C818CA8B9251b393131C08a736A67ccB19297"},"Deployed Contract"))),(0,n.kt)("p",null,"A vault for temporary storage of execution layer (EL) rewards (MEV and tx priority fee).\nSee the Lido improvement proposal ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/lidofinance/lido-improvement-proposals/blob/develop/LIPS/lip-12.md"},"#12"),"."),(0,n.kt)("p",null,"Both the transaction priority fee and MEV rewards are collected by specifying the contract's address as the coinbase (",(0,n.kt)("inlineCode",{parentName:"p"},"feeRecipient"),"). Additionally, MEV rewards are also extracted whenever payload builders include an explicit transaction that transfers MEV shares to the ",(0,n.kt)("inlineCode",{parentName:"p"},"feeRecipient")," in the payload. Thereby, the contract features a payable receive function that accepts incoming ether."),(0,n.kt)("p",null,"Only the ",(0,n.kt)("a",{parentName:"p",href:"lido"},(0,n.kt)("inlineCode",{parentName:"a"},"Lido"))," contract can withdraw the accumulated rewards to distribute them between ",(0,n.kt)("inlineCode",{parentName:"p"},"stETH")," holders as part of the Lido oracle report."),(0,n.kt)("p",null,"NB: Any ether sent to the contract by accident is unrecoverable and will be distributed by the protocol as accrued rewards."),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"receive"},"receive()"),(0,n.kt)("p",null,"Allows the contract to receive ETH via transactions."),(0,n.kt)("p",null,"Emits the ",(0,n.kt)("inlineCode",{parentName:"p"},"ETHReceived")," event."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sol"},"receive() external payable;\n")),(0,n.kt)("h3",{id:"withdrawrewards"},"withdrawRewards()"),(0,n.kt)("p",null,"Move all accumulated EL rewards to the Lido contract. Can only be called by the Lido contract.\nReturns the ether amount withdrawn."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sol"},"function withdrawRewards(uint256 _maxAmount) external returns (uint256 amount)\n")),(0,n.kt)("h4",{id:"parameters"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"_maxAmount")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"uint256")),(0,n.kt)("td",{parentName:"tr",align:null},"Max amount of ETH to withdraw")))),(0,n.kt)("h3",{id:"recovererc20"},"recoverERC20()"),(0,n.kt)("p",null,"Transfers the given amount of the ERC20-token (defined by the provided token contract address)\ncurrently belonging to the vault contract address to the Lido treasury address."),(0,n.kt)("p",null,"Emits the ",(0,n.kt)("inlineCode",{parentName:"p"},"ERC20Recovered")," event."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sol"},"function recoverERC20(address _token, uint256 _amount) external\n")),(0,n.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"_token")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"address")),(0,n.kt)("td",{parentName:"tr",align:null},"ERC20-compatible token")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"_amount")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"uint256")),(0,n.kt)("td",{parentName:"tr",align:null},"token amount to recover")))),(0,n.kt)("h3",{id:"recovererc721"},"recoverERC721()"),(0,n.kt)("p",null,"Transfers the given tokenId of the ERC721-compatible NFT (defined by the provided token contract address)\ncurrently belonging to the vault contract address to the Lido treasury address."),(0,n.kt)("p",null,"Emits the ",(0,n.kt)("inlineCode",{parentName:"p"},"ERC721Recovered")," event."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sol"},"function recoverERC721(address _token, uint256 _tokenId) external\n")),(0,n.kt)("h4",{id:"parameters-2"},"Parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"_token")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"address")),(0,n.kt)("td",{parentName:"tr",align:null},"ERC721-compatible token")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"_tokenId")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"uint256")),(0,n.kt)("td",{parentName:"tr",align:null},"minted token id")))))}p.isMDXComponent=!0}}]);