"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[953],{3905:function(e,r,t){t.d(r,{Zo:function(){return c},kt:function(){return h}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),p=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=p(e.components);return n.createElement(l.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),h=a,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return t?n.createElement(m,i(i({ref:r},c),{},{components:t})):n.createElement(m,i({ref:r},c))}));function h(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9786:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var n=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],s={},l="Lido Subgraph Introduction",p={unversionedId:"integrations/subgraph",id:"integrations/subgraph",title:"Lido Subgraph Introduction",description:"Lido has a GraphQL API Endpoint hosted by The Graph called a subgraph for indexing and organizing data from the Lido smart contracts.",source:"@site/docs/integrations/subgraph.md",sourceDirName:"integrations",slug:"/integrations/subgraph",permalink:"/integrations/subgraph",editUrl:"https://github.com/lidofinance/docs/blob/main/docs/integrations/subgraph.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"SDKs",permalink:"/integrations/sdk"},next:{title:"Specification",permalink:"/integrations/aave/specification"}},c=[{value:"GraphQL Schema",id:"graphql-schema",children:[],level:2},{value:"Ethereum Mainnet",id:"ethereum-mainnet",children:[],level:2},{value:"Helpful Links",id:"helpful-links",children:[],level:2},{value:"Rewards Distribution",id:"rewards-distribution",children:[],level:2},{value:"Transfers",id:"transfers",children:[],level:2},{value:"Oracle Reports",id:"oracle-reports",children:[],level:2},{value:"Submissions",id:"submissions",children:[],level:2},{value:"Node Operator Keys",id:"node-operator-keys",children:[],level:2}],u={toc:c};function d(e){var r=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"lido-subgraph-introduction"},"Lido Subgraph Introduction"),(0,o.kt)("p",null,"Lido has a GraphQL API Endpoint hosted by ",(0,o.kt)("a",{parentName:"p",href:"https://thegraph.com/docs/about/introduction#what-the-graph-is"},"The Graph")," called a subgraph for indexing and organizing data from the Lido smart contracts."),(0,o.kt)("p",null,"This subgraph is can be used to query Lido data."),(0,o.kt)("h2",{id:"graphql-schema"},"GraphQL Schema"),(0,o.kt)("p",null,"The schema of GraphQL elements available is defined in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/lidofinance/lido-subgraph/blob/master/schema.graphql"},(0,o.kt)("inlineCode",{parentName:"a"},"/schema.graphql")," ")),(0,o.kt)("p",null,"Subgraph information is serviced by a decentralized group of server operators called Indexers."),(0,o.kt)("h2",{id:"ethereum-mainnet"},"Ethereum Mainnet"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=UrfIpm-Vlgs"},"Creating an API Key Video Tutorial")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://thegraph.com/explorer/subgraph?id=HXfMc1jPHfFQoccWd7VMv66km75FoxVHDMvsJj5vG5vf&view=Overview"},"Explorer Page")),(0,o.kt)("li",{parentName:"ul"},"GraphQL Endpoint: ",(0,o.kt)("a",{parentName:"li",href:"https://gateway.thegraph.com/api/%5Bapi-key%5D/subgraphs/id/HXfMc1jPHfFQoccWd7VMv66km75FoxVHDMvsJj5vG5vf"},"https://gateway.thegraph.com/api/[api-key]/subgraphs/id/HXfMc1jPHfFQoccWd7VMv66km75FoxVHDMvsJj5vG5vf")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/lidofinance/lido-subgraph/"},"Code Repo"))),(0,o.kt)("h2",{id:"helpful-links"},"Helpful Links"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://thegraph.com/docs/en/developer/querying-from-your-app/"},"Querying from an Application")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://thegraph.com/docs/en/studio/managing-api-keys/"},"Managing your API Key & Setting your indexer preferences")),(0,o.kt)("h1",{id:"query-examples"},"Query Examples"),(0,o.kt)("p",null,"Below are some sample queries you can use to gather information from the Lido contracts."),(0,o.kt)("p",null,"You can build your own queries using a ",(0,o.kt)("a",{parentName:"p",href:"https://graphiql-online.com"},"GraphQL Explorer")," and enter your endpoint to limit the data to exactly what you need."),(0,o.kt)("h2",{id:"rewards-distribution"},"Rewards Distribution"),(0,o.kt)("p",null,"Query description: Daily staking rewards data with calculated APR and fees distribution"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  totalRewards(first: 100, orderBy: block, orderDirection: desc) {\n    id\n    totalRewards\n    totalRewardsWithFees\n    insuranceFee\n    treasuryFee\n    totalFee\n    dust\n    nodeOperatorFees {\n      address\n      fee\n    }\n    nodeOperatorsShares {\n      address\n      shares\n    }\n    shares2mint\n    sharesToInsuranceFund\n    sharesToOperators\n    sharesToTreasury\n    totalPooledEtherBefore\n    totalPooledEtherAfter\n    totalSharesBefore\n    totalSharesAfter\n    apr\n    aprBeforeFees\n    aprRaw\n    preTotalPooledEther\n    postTotalPooledEther\n    timeElapsed\n    block\n    blockTime\n    transactionIndex\n  }\n}\n")),(0,o.kt)("h2",{id:"transfers"},"Transfers"),(0,o.kt)("p",null,"Query description: stETH transfers between addresses"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  lidoTransfers(first: 50) {\n    from\n    to\n    value\n    block\n    blockTime\n    transactionHash\n  }\n}\n")),(0,o.kt)("h2",{id:"oracle-reports"},"Oracle Reports"),(0,o.kt)("p",null,"Query description: obtain oracle reports"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  oracleCompleteds(first: 500, orderBy: blockTime, orderDirection: desc) {\n    epochId\n    beaconBalance\n    beaconValidators\n    block\n    blockTime\n  }\n}\n")),(0,o.kt)("h2",{id:"submissions"},"Submissions"),(0,o.kt)("p",null,"Query description: obtain submission of the first 50"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  lidoSubmissions(first: 50) {\n    sender\n    amount\n    block\n    blockTime\n    transactionHash\n  }\n}\n")),(0,o.kt)("h2",{id:"node-operator-keys"},"Node Operator Keys"),(0,o.kt)("p",null,"Query description: Fetch validator keys of a node operator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  nodeOperatorSigningKeys(where: { operatorId: 0 }) {\n    pubkey\n  }\n}\n")))}d.isMDXComponent=!0}}]);