(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{84:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),o=(n(0),n(93)),c={},s={unversionedId:"contracts/lido",id:"contracts/lido",isDocsHomePage:!1,title:"Lido",description:"- Source code",source:"@site/docs/contracts/lido.md",sourceDirName:"contracts",slug:"/contracts/lido",permalink:"/docs/contracts/lido",editUrl:"https://github.com/lidofinance/docs/blob/main/docs/contracts/lido.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Current Integrations",permalink:"/docs/integrations/current-integrations"},next:{title:"LidoOracle",permalink:"/docs/contracts/lido-oracle"}},i=[{value:"Rebasing",id:"rebasing",children:[]},{value:"Beacon Stats Reporting",id:"beacon-stats-reporting",children:[]}],l={toc:i};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://github.com/lidofinance/lido-dao/blob/master/contracts/0.4.24/Lido.sol"},"Source code")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://etherscan.io/address/0xae7ab96520de3a18e5e111b5eaab095312d7fe84"},"Deployed contract"))),Object(o.b)("p",null,"Lido is the core contract which acts as a liquid staking pool. The contract is responsible for Ether deposits and withdrawals, minting and burning liquid tokens, delegating funds to node operators, applying fees, and accepting updates from the oracle contract. Node Operators' logic is extracted to a separate contract, NodeOperatorsRegistry."),Object(o.b)("p",null,"Lido also acts as an ERC20 token which represents staked ether, stETH. Tokens are minted upon deposit and burned when redeemed. stETH tokens are pegged 1:1 to the Ethers that are held by Lido. stETH token\u2019s balances are updated when the oracle reports change in total stake every day."),Object(o.b)("h2",{id:"rebasing"},"Rebasing"),Object(o.b)("p",null,"When a rebase occurs the supply of the token is increased or decreased algorithmically, based on the staking rewards(or slashing penalties) in the Eth2 chain. Rebase happens when oracles report beacon stats."),Object(o.b)("p",null,'Rebasing mechanism implemented via "shares". Instead of storing map with account balances, Lido stores which share owned by account in the total amount of Ether controlled by the protocol.'),Object(o.b)("p",null,"Balance of account calculated next way:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"balanceOf(account) = shares[account] * totalPooledEther / totalShares\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"shares")," - map of user account shares. Every time user deposit ether, it converted to shares and added to current user shares.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"totalShares")," sum of shares of all account in ",Object(o.b)("inlineCode",{parentName:"p"},"shares")," map")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"totalPooledEther")," is a sum of three types of ether owned by protocol:"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"buffered balance - ether stored on contract and haven't deposited to official Deposit contract yet."),Object(o.b)("li",{parentName:"ul"},"transient balance - ether submitted to the official Deposit contract but not yet visible in the beacon state."),Object(o.b)("li",{parentName:"ul"},"beacon balance - total amount of ether on validator accounts. This value reported by oracles and makes strongest impact to stETH total supply change.")))),Object(o.b)("p",null,"For example, assume that we have:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"totalShares = 500\ntotalPooledEther = 10 ETH\nsharesOf(Alice) -> 100\nsharesOf(Bob) -> 400\n")),Object(o.b)("p",null,"Therefore:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"balanceOf(Alice) -> 2 tokens which corresponds 2 ETH\nbalanceOf(Bob) -> 8 tokens which corresponds 8 ETH\n")),Object(o.b)("h2",{id:"beacon-stats-reporting"},"Beacon Stats Reporting"),Object(o.b)("p",null,"One of the most important parts of protocol, it's precise and steady reported data about current balances of validators. Such reports happen once at defined period of time, called frame. Frame duration set by DAO, current value is 24 hours."),Object(o.b)("p",null,"To update stats on main Lido contract oracle demands quorum to be reached.\nQuorum - is a necessary amount of reports with equal stats from offchain oracle daemons run by protocol participants.\nQuorum size and members controlled by DAO.\nIf quorum wasn't reached next report can happen only at the first epoch of next frame (after 24 hours)."),Object(o.b)("p",null,"Report consists of count of validators participated in protocol - beacon validators and total amount of ether on validator accounts - beacon balance. Typically beacon balance growth from report to report, but in exceptional cases it also can drops, because of slashing."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"When beacon balance grown between reports, protocol register profit and distribute reward of fresh minting stETH tokens between stETH holders, node operators, insurance fund and treasury. Fee distribution for node operators, insurance fund and treasury can be set by DAO."),Object(o.b)("li",{parentName:"ul"},"When frame was ended with slashing and new beacon balance less than previous one total supply of stETH becomes less than in previous report and no rewards distributed.")))}p.isMDXComponent=!0},93:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,h=b["".concat(c,".").concat(u)]||b[u]||d[u]||o;return n?r.a.createElement(h,s(s({ref:t},l),{},{components:n})):r.a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var l=2;l<o;l++)c[l]=n[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);