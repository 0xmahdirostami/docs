"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2860],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9532:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={},i="Execution Layer Rewards Configuration",l={unversionedId:"guides/node-operators/el-rewards-configuration",id:"guides/node-operators/el-rewards-configuration",title:"Execution Layer Rewards Configuration",description:"Node Operators who run validators for Lido are required to set the fee recipient for the relevant validators to the protocol-managed LidoExecutionLayerRewardsVault which manages Execution Layer Rewards. This address differs depending on the network (Mainnet, testnet, etc.) and is not the same as the Withdrawal Credentials address.",source:"@site/docs/guides/node-operators/el-rewards-configuration.md",sourceDirName:"guides/node-operators",slug:"/guides/node-operators/el-rewards-configuration",permalink:"/guides/node-operators/el-rewards-configuration",editUrl:"https://github.com/lidofinance/docs/blob/main/docs/guides/node-operators/el-rewards-configuration.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Validator Keys",permalink:"/guides/node-operators/validator-keys"},next:{title:"Introduction",permalink:"/guides/node-operators/exits/introduction"}},s=[{value:"Fee recipient options for various Beacon Chain clients",id:"fee-recipient-options-for-various-beacon-chain-clients",children:[],level:2},{value:"MEV-Boost related options for various Beacon Chain clients",id:"mev-boost-related-options-for-various-beacon-chain-clients",children:[],level:2},{value:"Relays and MEV-Boost options",id:"relays-and-mev-boost-options",children:[{value:"Mainnet",id:"mainnet",children:[],level:3},{value:"Goerli",id:"goerli",children:[],level:3}],level:2}],d={toc:s};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"execution-layer-rewards-configuration"},"Execution Layer Rewards Configuration"),(0,r.kt)("p",null,"Node Operators who run validators for Lido are required to set the fee recipient for the relevant validators to the protocol-managed ",(0,r.kt)("a",{parentName:"p",href:"/contracts/lido-execution-layer-rewards-vault"},(0,r.kt)("inlineCode",{parentName:"a"},"LidoExecutionLayerRewardsVault"))," which manages ",(0,r.kt)("a",{parentName:"p",href:"/contracts/lido#execution-layer-rewards"},"Execution Layer Rewards"),". This address differs depending on the network (Mainnet, testnet, etc.) and is ",(0,r.kt)("em",{parentName:"p"},"not")," the same as the ",(0,r.kt)("a",{parentName:"p",href:"/contracts/lido#getwithdrawalcredentials"},"Withdrawal Credentials")," address."),(0,r.kt)("p",null,"This smart contract address can also be retrieved by ",(0,r.kt)("a",{parentName:"p",href:"/contracts/lido#getelrewardsvault"},"querying the ",(0,r.kt)("inlineCode",{parentName:"a"},"getELRewardsVault()"))," method in the core stETH contract."),(0,r.kt)("p",null,"The address is also available in the ",(0,r.kt)("a",{parentName:"p",href:"/deployed-contracts"},"Deployed Contracts")," docs page, labeled as ",(0,r.kt)("inlineCode",{parentName:"p"},"Execution Layer Rewards Vault"),"."),(0,r.kt)("h2",{id:"fee-recipient-options-for-various-beacon-chain-clients"},"Fee recipient options for various Beacon Chain clients"),(0,r.kt)("p",null,"Beacon chain clients offer a variety of methods for configuring the fee recipient.\nFor some clients the fee recipient option should be applied with other options, see reference pages for specific client. Please note that most clients also support setting the fee recipient on a per-validator key basis (e.g. for Teku this can be achieved via ",(0,r.kt)("a",{parentName:"p",href:"https://docs.teku.consensys.net/en/latest/Reference/CLI/CLI-Syntax/#validators-proposer-config"},"the proposer config"),". Consult the docs for each client for specific instructions."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Consensus client"),(0,r.kt)("th",{parentName:"tr",align:null},"CLI option"),(0,r.kt)("th",{parentName:"tr",align:null},"CLI reference page"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Teku"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--validators-proposer-default-fee-recipient=<ADDRESS>")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.teku.consensys.net/en/latest/Reference/CLI/CLI-Syntax/#validators-proposer-default-fee-recipient"},"Teku CLI options"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Lighthouse"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--suggested-fee-recipient=<ADDRESS>")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://lighthouse-book.sigmaprime.io/suggested-fee-recipient.html?highlight=fee%20recipient#suggested-fee-recipient"},"Lighthouse Fee Recipient Config"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Nimbus"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--suggested-fee-recipient=<ADDRESS>")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://nimbus.guide/merge.html?highlight=recipient#prepare-a-suggested-fee-recipient"},"Nimbus Fee Recipient Info"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Prysm"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--suggested-fee-recipient=<ADDRESS>")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.prylabs.network/docs/execution-node/fee-recipient"},"Prysm CLI options"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Lodestar"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--chain.defaultFeeRecipient=<ADDRESS>")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://chainsafe.github.io/lodestar/reference/cli/"},"Lodestar CLI options"))))),(0,r.kt)("h2",{id:"mev-boost-related-options-for-various-beacon-chain-clients"},"MEV-Boost related options for various Beacon Chain clients"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Consensus client"),(0,r.kt)("th",{parentName:"tr",align:null},"CLI option"),(0,r.kt)("th",{parentName:"tr",align:null},"CLI reference page"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Teku"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--builder-endpoint=<URL>")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.teku.consensys.net/en/latest/Reference/CLI/CLI-Syntax/#builder-endpoint"},"Teku MEV integration"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Lighthouse"),(0,r.kt)("td",{parentName:"tr",align:null},"BN: ",(0,r.kt)("inlineCode",{parentName:"td"},"--builder=<URL>")," VC: ",(0,r.kt)("inlineCode",{parentName:"td"},"--builder-proposals")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://lighthouse-book.sigmaprime.io/builders.html"},"Lighthouse MEV integration"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Nimbus"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--payload-builder=true --payload-builder-url=<URL>")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://nimbus.guide/external-block-builder.html"},"Nimbus MEV integration"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Prysm"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--http-mev-relay=<URL>")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://docs.prylabs.network/docs/prysm-usage/parameters"},"Prysm MEV integration"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Lodestar"),(0,r.kt)("td",{parentName:"tr",align:null},"BN: ",(0,r.kt)("inlineCode",{parentName:"td"},"--builder --builder.urls=<URL>")," VC: ",(0,r.kt)("inlineCode",{parentName:"td"},"--builder")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://chainsafe.github.io/lodestar/usage/mev-integration/"},"Lodestar MEV integration"))))),(0,r.kt)("h2",{id:"relays-and-mev-boost-options"},"Relays and MEV-Boost options"),(0,r.kt)("p",null,"List of possible relays that have been approved by DAO can be fetched by ",(0,r.kt)("a",{parentName:"p",href:"/contracts/mev-boost-relays-allowed-list#get_relays"},"querying the ",(0,r.kt)("inlineCode",{parentName:"a"},"get_relays()"))," method in ",(0,r.kt)("inlineCode",{parentName:"p"},"MevBoostRelayAllowedList")," contract."),(0,r.kt)("h3",{id:"mainnet"},"Mainnet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"./mev-boost -mainnet -relay-check -relay <comma-separated relay urls>\n")),(0,r.kt)("h3",{id:"goerli"},"Goerli"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"./mev-boost -goerli -relay-check -relay <comma-separated relay urls>\n")),(0,r.kt)("p",null,"Full list of MEV-boost CLI options can be found here ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/flashbots/mev-boost#mev-boost-cli-arguments"},"MEV-Boost CLI Options")))}p.isMDXComponent=!0}}]);