"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[119],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>c});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(a),k=r,c=u["".concat(s,".").concat(k)]||u[k]||m[k]||l;return a?n.createElement(c,i(i({ref:t},p),{},{components:a})):n.createElement(c,i({ref:t},p))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=k;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},6471:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var n=a(3117),r=(a(7294),a(3905));const l={},i="Lido",o={unversionedId:"contracts/lido",id:"contracts/lido",title:"Lido",description:"- Source code",source:"@site/docs/contracts/lido.md",sourceDirName:"contracts",slug:"/contracts/lido",permalink:"/contracts/lido",draft:!1,editUrl:"https://github.com/lidofinance/docs/blob/main/docs/contracts/lido.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"LidoLocator",permalink:"/contracts/lido-locator"},next:{title:"EIP712StETH",permalink:"/contracts/eip712-steth"}},s={},d=[{value:"What is Lido?",id:"what-is-lido",level:2},{value:"Submit",id:"submit",level:2},{value:"Deposit",id:"deposit",level:2},{value:"Rebase",id:"rebase",level:2},{value:"Oracle report",id:"oracle-report",level:2},{value:"View Methods",id:"view-methods",level:2},{value:"name()",id:"name",level:3},{value:"symbol()",id:"symbol",level:3},{value:"decimals()",id:"decimals",level:3},{value:"totalSupply()",id:"totalsupply",level:3},{value:"getTotalPooledEther()",id:"gettotalpooledether",level:3},{value:"balanceOf()",id:"balanceof",level:3},{value:"getTotalShares()",id:"gettotalshares",level:3},{value:"sharesOf()",id:"sharesof",level:3},{value:"allowance()",id:"allowance",level:3},{value:"Parameters",id:"parameters",level:4},{value:"nonces()",id:"nonces",level:3},{value:"DOMAIN_SEPARATOR()",id:"domain_separator",level:3},{value:"eip712Domain()",id:"eip712domain",level:3},{value:"getSharesByPooledEth()",id:"getsharesbypooledeth",level:3},{value:"getPooledEthByShares()",id:"getpooledethbyshares",level:3},{value:"getBufferedEther()",id:"getbufferedether",level:3},{value:"getBeaconStat()",id:"getbeaconstat",level:3},{value:"isStakingPaused()",id:"isstakingpaused",level:3},{value:"getCurrentStakeLimit()",id:"getcurrentstakelimit",level:3},{value:"getStakeLimitFullInfo()",id:"getstakelimitfullinfo",level:3},{value:"getTotalELRewardsCollected()",id:"gettotalelrewardscollected",level:3},{value:"getDepositableEther()",id:"getdepositableether",level:3},{value:"canDeposit()",id:"candeposit",level:3},{value:"getLidoLocator()",id:"getlidolocator",level:3},{value:"getContractVersion()",id:"getcontractversion",level:3},{value:"Methods",id:"methods",level:2},{value:"transfer()",id:"transfer",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns",level:4},{value:"transferShares()",id:"transfershares",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-1",level:4},{value:"approve()",id:"approve",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-2",level:4},{value:"permit()",id:"permit",level:3},{value:"transferFrom()",id:"transferfrom",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-3",level:4},{value:"transferSharesFrom()",id:"transfersharesfrom",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-4",level:4},{value:"increaseAllowance()",id:"increaseallowance",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-5",level:4},{value:"decreaseAllowance()",id:"decreaseallowance",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-6",level:4},{value:"submit()",id:"submit-1",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-7",level:4},{value:"deposit()",id:"deposit-1",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"stop()",id:"stop",level:3},{value:"resume()",id:"resume",level:3},{value:"pauseStaking()",id:"pausestaking",level:3},{value:"resumeStaking()",id:"resumestaking",level:3},{value:"setStakingLimit()",id:"setstakinglimit",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"removeStakingLimit()",id:"removestakinglimit",level:3},{value:"receiveELRewards()",id:"receiveelrewards",level:3},{value:"receiveWithdrawals()",id:"receivewithdrawals",level:3},{value:"handleOracleReport()",id:"handleoraclereport",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-8",level:4},{value:"unsafeChangeDepositedValidators()",id:"unsafechangedepositedvalidators",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"transferToVault()",id:"transfertovault",level:3},{value:"Parameters",id:"parameters-13",level:4}],p={toc:d},u="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lido"},"Lido"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lidofinance/lido-dao/blob/master/contracts/0.4.24/Lido.sol"},"Source code")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://etherscan.io/address/0xae7ab96520de3a18e5e111b5eaab095312d7fe84"},"Deployed contract"))),(0,r.kt)("p",null,"Liquid staking pool and a related ",(0,r.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-20"},"ERC-20")," rebasing token (stETH)"),(0,r.kt)("h2",{id:"what-is-lido"},"What is Lido?"),(0,r.kt)("p",null,"Lido is a liquid staking pool and the core contract that is responsible for:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"accepting users' stake, buffering it and minting respective amount of liquid token"),(0,r.kt)("li",{parentName:"ul"},"do a proper accounting based on received oracle reports and the current state of the protocol"),(0,r.kt)("li",{parentName:"ul"},"collecting withdrawals, priority fees and MEV from respective vaults into the buffer"),(0,r.kt)("li",{parentName:"ul"},"applying fees and distributing rewards"),(0,r.kt)("li",{parentName:"ul"},"passing buffered ether further to ",(0,r.kt)("a",{parentName:"li",href:"/contracts/staking-router"},"StakingRouter")," or ",(0,r.kt)("a",{parentName:"li",href:"/contracts/withdrawal-queue-erc721"},"WithdrawalQueueERC721"))),(0,r.kt)("p",null,"Also, Lido is an ",(0,r.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-20"},"ERC-20")," rebasing token which represents staked ether, ",(0,r.kt)("inlineCode",{parentName:"p"},"stETH"),". Tokens are minted upon deposit and burned when redeemed. stETH holder balances are updated daily with oracle reports. It also implements ",(0,r.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-2612"},"ERC-2612")," permit and ",(0,r.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1271"},"ERC-1271")," signature validation extensions."),(0,r.kt)("p",null,"Other contracts are bound to the core and have the following responsibilities:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/contracts/lido-locator"},(0,r.kt)("inlineCode",{parentName:"a"},"LidoLocator")),": protocol-wide address book which contains references to all meaningful parts of the Lido protocol on-chain"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/contracts/withdrawal-queue-erc721"},(0,r.kt)("inlineCode",{parentName:"a"},"WithdrawalQueueERC721")),": withdrawal requests FIFO queue and a respective NFT (unstETH)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/contracts/staking-router"},(0,r.kt)("inlineCode",{parentName:"a"},"StakingRouter")),": hub that manages staking modules and distributes the stake among them"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/contracts/node-operators-registry"},(0,r.kt)("inlineCode",{parentName:"a"},"NodeOperatorsRegistry")),": original module responsible for managing the curated set of node operators"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/contracts/oracle-report-sanity-checker"},(0,r.kt)("inlineCode",{parentName:"a"},"OracleReportSanityChecker")),": helper for validation of oracle report parameters and smoothening token rebases"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/contracts/burner"},(0,r.kt)("inlineCode",{parentName:"a"},"Burner")),": vault to contain stETH that ought to be burned on oracle report"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/contracts/withdrawal-vault"},(0,r.kt)("inlineCode",{parentName:"a"},"WithdrawalVault")),": vault to collect partial and full withdrawals coming from Beacon chain"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/contracts/lido-execution-layer-rewards-vault"},(0,r.kt)("inlineCode",{parentName:"a"},"LidoExecutionLayerRewardsVault")),": vault to collect priority fees and MEV rewards coming from validators of the pool"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/contracts/deposit-security-module"},(0,r.kt)("inlineCode",{parentName:"a"},"DepositSecurityModule")),": protection from deposit frontrunning vulnerability"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/contracts/accounting-oracle"},(0,r.kt)("inlineCode",{parentName:"a"},"AccountingOracle")),": oracle committee, that gathers an accounting report for the protocol"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/contracts/eip712-steth"},(0,r.kt)("inlineCode",{parentName:"a"},"EIP712StETH")),": ad-hoc helper to implement ERC-2612 permit for Solidity 0.4.24 Lido contract")),(0,r.kt)("h2",{id:"submit"},"Submit"),(0,r.kt)("p",null,"Lido contract is a main entry point for stakers. To take part in the pool, a user can send some ETH to contract address and the same amount of stETH tokens will be minted to the sender address. Submitted ether are accumulated in the buffer and can be passed further to ",(0,r.kt)("a",{parentName:"p",href:"/contracts/withdrawal-queue-erc721"},(0,r.kt)("inlineCode",{parentName:"a"},"WithdrawalQueueERC721"))," to fulfill withdrawal requests or to ",(0,r.kt)("a",{parentName:"p",href:"/contracts/staking-router"},(0,r.kt)("inlineCode",{parentName:"a"},"StakingRouter"))," to deposit as a new validator stake."),(0,r.kt)("p",null,"To withdraw the underlying ETH back, user may use ",(0,r.kt)("a",{parentName:"p",href:"/contracts/withdrawal-queue-erc721"},(0,r.kt)("inlineCode",{parentName:"a"},"WithdrawalQueueERC721"))," contract or swap the token on the secondary market (it may be a cheaper and faster alternative)."),(0,r.kt)("h2",{id:"deposit"},"Deposit"),(0,r.kt)("p",null,"User submitted ether is stored in the buffer and can be later used for withdrawals or passed further to ",(0,r.kt)("a",{parentName:"p",href:"/contracts/staking-router"},(0,r.kt)("inlineCode",{parentName:"a"},"StakingRouter"))," to be used as validator's deposits. It happens asyncronously and uses ",(0,r.kt)("a",{parentName:"p",href:"/contracts/deposit-security-module"},(0,r.kt)("inlineCode",{parentName:"a"},"DepositSecurityModule"))," as a guard to prevent deposit frontrunning vulnerability."),(0,r.kt)("mermaid",{value:"graph LR;\n  A[/  \\]--depositBufferedEther--\x3eDepositSecurityModule--\x3eLido--\x3eStakingRouter--\x3eNodeOperatorsRegistry;"}),(0,r.kt)("h2",{id:"rebase"},"Rebase"),(0,r.kt)("p",null,"When an oracle report occurs, the supply of the token is increased or decreased algorithmically, based on staking rewards (or slashing penalties) on the Beacon chain, execution layer rewards (starting from ",(0,r.kt)("a",{parentName:"p",href:"https://ethereum.org/en/upgrades/merge/"},"the Merge")," Ethereum upgrade) or fulfilled withdrawal requests (starting from ",(0,r.kt)("a",{parentName:"p",href:"https://blog.lido.fi/introducing-lido-v2/"},"Lido V2"),"). A rebase happens when oracle reports beacon stats."),(0,r.kt)("p",null,'The rebasing mechanism is implemented via "shares" concept. Instead of storing map with account balances, Lido stores which share of the total pool is owned by account. The balance of an account is calculated as follows:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"balanceOf(account) = shares[account] * totalPooledEther / totalShares\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"shares")," - map of user account shares. Every time a user deposits ether, it is converted to shares and added to current user shares amount.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"totalShares")," - sum of shares of all account in ",(0,r.kt)("inlineCode",{parentName:"p"},"shares")," map")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"totalPooledEther")," - a sum of three types of ether owned by protocol:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"buffered balance - ether stored on contract and haven't deposited or locked for withdrawals yet"),(0,r.kt)("li",{parentName:"ul"},"transient balance - ether submitted to the official Deposit contract but not yet visible in the beacon state"),(0,r.kt)("li",{parentName:"ul"},"beacon balance - total amount of ether on validator accounts. This value reported by oracles and makes strongest impact to stETH total supply change")))),(0,r.kt)("p",null,"For example, assume that we have:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"totalShares = 5\ntotalPooledEther = 10 ETH\nsharesOf(Alice) -> 1\nsharesOf(Bob) -> 4\n")),(0,r.kt)("p",null,"Therefore:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"balanceOf(Alice) -> 2 tokens which corresponds to 2 ETH\nbalanceOf(Bob) -> 8 tokens which corresponds to 8 ETH\n")),(0,r.kt)("p",null,"On each rebase ",(0,r.kt)("inlineCode",{parentName:"p"},"totalPooledEther")," normally increases, indicating that there were some rewards earned by validators, that ought to be distributed, so user balance gets increased as well automatically, in spite their shares remaining as they were."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"totalPooledEther = 15 ETH\n// user balance increased\nbalanceOf(Alice) -> 3 tokens which corresponds to 3 ETH now\nbalanceOf(Bob) -> 12 tokens which corresponds to 12 ETH now\n// shares remain still\nsharesOf(Alice) -> 1\nsharesOf(Bob) -> 4\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Since the balances of all token holders change when the amount of total pooled Ether changes, this token cannot fully implement ERC-20 standard: it only emits ",(0,r.kt)("inlineCode",{parentName:"p"},"Transfer")," events upon explicit transfer between holders. In contrast, when the total amount of pooled ether increases, no ",(0,r.kt)("inlineCode",{parentName:"p"},"Transfer")," events are generated: doing so would require emitting an event for each token holder and thus running an unbounded loop.")),(0,r.kt)("h2",{id:"oracle-report"},"Oracle report"),(0,r.kt)("p",null,"One of the cornerstones of the Lido protocol is the oracle report, that usually (but not guaranteed) once a day provides the protocol with the data that can't be easily accessed on-chain, but required for precise accounting. It includes some Beacon chain stats as well as corresponding EL-side values that are valid on the reporting block and the decision data required to fulfill pending withdrawal requests."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Beacon chain stats:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the total number of validators managed by the pool"),(0,r.kt)("li",{parentName:"ul"},"the total balance of validators managed by the pool"))),(0,r.kt)("li",{parentName:"ul"},"Historical EL values:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"withdrawal vault balance"),(0,r.kt)("li",{parentName:"ul"},"execution layer rewards vault balance"),(0,r.kt)("li",{parentName:"ul"},"burner stETH shares balance"))),(0,r.kt)("li",{parentName:"ul"},"Withdrawal-related data",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"requests in the queue to be finalized"),(0,r.kt)("li",{parentName:"ul"},"share rate to be used for finalization")))),(0,r.kt)("p",null,"Oracle report is processed in 9 simple steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Memorize the pre-state that will be required for incremental updates of the protocol balance"),(0,r.kt)("li",{parentName:"ol"},"Validate the report data using ",(0,r.kt)("a",{parentName:"li",href:"/contracts/oracle-report-sanity-checker"},(0,r.kt)("inlineCode",{parentName:"a"},"OracleReportSanityChecker"))),(0,r.kt)("li",{parentName:"ol"},"Calculate the amount of ether to be locked on ",(0,r.kt)("a",{parentName:"li",href:"/contracts/withdrawal-queue-erc721"},(0,r.kt)("inlineCode",{parentName:"a"},"WithdrawalQueueERC721"))," and move the respective amount of shares to be burnt to ",(0,r.kt)("a",{parentName:"li",href:"/contracts/burner"},(0,r.kt)("inlineCode",{parentName:"a"},"Burner"))),(0,r.kt)("li",{parentName:"ol"},"Using ",(0,r.kt)("a",{parentName:"li",href:"/contracts/oracle-report-sanity-checker"},(0,r.kt)("inlineCode",{parentName:"a"},"OracleReportSanityChecker"))," calculate the amounts of ether that can be withdrawn from ",(0,r.kt)("a",{parentName:"li",href:"/contracts/lido-execution-layer-rewards-vault"},(0,r.kt)("inlineCode",{parentName:"a"},"LidoExecutionLayerRewardsVault"))," and ",(0,r.kt)("a",{parentName:"li",href:"/contracts/withdrawal-vault"},(0,r.kt)("inlineCode",{parentName:"a"},"WithdrawalVault"))," as well as the amount of shares that can be burnt from ",(0,r.kt)("a",{parentName:"li",href:"/contracts/burner"},(0,r.kt)("inlineCode",{parentName:"a"},"Burner"))," to avoid the rebase that can be easily frontrun."),(0,r.kt)("li",{parentName:"ol"},"Collect the calculated amounts of ether from vaults and proceed with withdrawal requests finalization: send requested ether to ",(0,r.kt)("a",{parentName:"li",href:"/contracts/withdrawal-queue-erc721"},(0,r.kt)("inlineCode",{parentName:"a"},"WithdrawalQueue"))),(0,r.kt)("li",{parentName:"ol"},"Burn the previously requested shares from ",(0,r.kt)("a",{parentName:"li",href:"/contracts/burner"},(0,r.kt)("inlineCode",{parentName:"a"},"Burner"))," for withdrawals or coverage application"),(0,r.kt)("li",{parentName:"ol"},"Distribute rewards and protocol fee minting new stETH for the respective parties"),(0,r.kt)("li",{parentName:"ol"},"Complete token rebase by informing observers (emit an event and call the external receivers if any)"),(0,r.kt)("li",{parentName:"ol"},"Post-report sanity check for share rate provided with report")),(0,r.kt)("mermaid",{value:"graph LR;\n  S[/Users' stake/]:::orange-.->B[Lido Buffer];\n  W[WithdrawalsVault]--\x3eB;\n  E[LidoExecutionLayerRewardsVault]--\x3eB;\n  B--\x3eD[StakingRouter];\n  B--\x3eWQ[WithdrawalQueue];\n  classDef orange fill:#f96;\n"}),(0,r.kt)("p",null,"So, the observable outcome of the report for the protocol is the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"withdrawal requests in the queue are fulfilled"),(0,r.kt)("li",{parentName:"ul"},"ether is collected from withdrawal and EL rewards vaults to the buffer"),(0,r.kt)("li",{parentName:"ul"},"CL balance is updated according to the report"),(0,r.kt)("li",{parentName:"ul"},"rewards are distributed among stakers, staking modules and protocol treasury")),(0,r.kt)("h2",{id:"view-methods"},"View Methods"),(0,r.kt)("h3",{id:"name"},"name()"),(0,r.kt)("p",null,"Returns the name of the token."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function name() returns (string)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Always returns ",(0,r.kt)("inlineCode",{parentName:"p"},"Liquid staked Ether 2.0"),".")),(0,r.kt)("h3",{id:"symbol"},"symbol()"),(0,r.kt)("p",null,"Returns the symbol of the token."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function symbol() returns (string)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Always returns ",(0,r.kt)("inlineCode",{parentName:"p"},"stETH"),".")),(0,r.kt)("h3",{id:"decimals"},"decimals()"),(0,r.kt)("p",null,"Returns the number of decimals for getting user representation of a token amount."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function decimals() returns (uint8)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Always returns ",(0,r.kt)("inlineCode",{parentName:"p"},"18"),".")),(0,r.kt)("h3",{id:"totalsupply"},"totalSupply()"),(0,r.kt)("p",null,"Returns the amount of tokens in existence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function totalSupply() returns (uint256)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Always equals to ",(0,r.kt)("inlineCode",{parentName:"p"},"getTotalPooledEther()")," since the token amount\nis pegged to the total amount of ether controlled by the protocol.")),(0,r.kt)("h3",{id:"gettotalpooledether"},"getTotalPooledEther()"),(0,r.kt)("p",null,"Returns the entire amount of ether controlled by the protocol"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getTotalPooledEther() returns (uint256)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The sum of all ETH balances in the protocol, equals to the total supply of ",(0,r.kt)("inlineCode",{parentName:"p"},"stETH"),".")),(0,r.kt)("h3",{id:"balanceof"},"balanceOf()"),(0,r.kt)("p",null,"Returns the amount of tokens owned by the ",(0,r.kt)("inlineCode",{parentName:"p"},"_account")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function balanceOf(address _account) returns (uint256)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Balances are dynamic and equal the ",(0,r.kt)("inlineCode",{parentName:"p"},"_account"),"'s share in the amount of the\ntotal Ether controlled by the protocol. See ",(0,r.kt)("a",{parentName:"p",href:"/contracts/lido#sharesof"},(0,r.kt)("inlineCode",{parentName:"a"},"sharesOf")),".")),(0,r.kt)("h3",{id:"gettotalshares"},"getTotalShares()"),(0,r.kt)("p",null,"Returns the total amount of shares in existence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getTotalShares() returns (uint256)\n")),(0,r.kt)("h3",{id:"sharesof"},"sharesOf()"),(0,r.kt)("p",null,"Returns the amount of shares owned by ",(0,r.kt)("inlineCode",{parentName:"p"},"_account")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function sharesOf(address _account) returns (uint256)\n")),(0,r.kt)("h3",{id:"allowance"},"allowance()"),(0,r.kt)("p",null,"Returns the remaining number of tokens that ",(0,r.kt)("inlineCode",{parentName:"p"},"_spender")," is allowed to spend\non behalf of ",(0,r.kt)("inlineCode",{parentName:"p"},"_owner")," through ",(0,r.kt)("inlineCode",{parentName:"p"},"transferFrom"),". This is zero by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function allowance(address _owner, address _spender) returns (uint256)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This value changes when ",(0,r.kt)("inlineCode",{parentName:"p"},"approve")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"transferFrom")," is called unless the allowance is infinite (2^256)")),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_owner")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address of owner")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_spender")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address of spender")))),(0,r.kt)("h3",{id:"nonces"},"nonces()"),(0,r.kt)("p",null,"Returns the current nonce for ",(0,r.kt)("inlineCode",{parentName:"p"},"owner"),". This value must be included whenever a signature is generated for ERC-2612 permit."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function nonces(address owner) returns (uint256)\n")),(0,r.kt)("h3",{id:"domain_separator"},"DOMAIN_SEPARATOR()"),(0,r.kt)("p",null,"Returns the domain separator used in the encoding of the signature for ERC-2612 permit, as defined by EIP-712."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function DOMAIN_SEPARATOR() returns (bytes32)\n")),(0,r.kt)("h3",{id:"eip712domain"},"eip712Domain()"),(0,r.kt)("p",null,"Returns the fields and values that describe the domain separator used by this contract for EIP-712"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function eip712Domain() returns (\n    string name,\n    string version,\n    uint256 chainId,\n    address verifyingContract\n)\n")),(0,r.kt)("h3",{id:"getsharesbypooledeth"},"getSharesByPooledEth()"),(0,r.kt)("p",null,"Returns the amount of shares that corresponds to ",(0,r.kt)("inlineCode",{parentName:"p"},"_ethAmount")," of the protocol-controlled ether."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getSharesByPooledEth(uint256 _ethAmount) returns (uint256)\n")),(0,r.kt)("h3",{id:"getpooledethbyshares"},"getPooledEthByShares()"),(0,r.kt)("p",null,"Returns the amount of ether that corresponds to ",(0,r.kt)("inlineCode",{parentName:"p"},"_sharesAmount")," token shares."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getPooledEthByShares(uint256 _sharesAmount) returns (uint256)\n")),(0,r.kt)("h3",{id:"getbufferedether"},"getBufferedEther()"),(0,r.kt)("p",null,"Returns the amount of ether temporary buffered on the contract's balance."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Buffered balance is kept on the contract from the moment the funds are received from user\nuntil the moment they are actually sent to the official\n",(0,r.kt)("a",{parentName:"p",href:"https://ethereum.org/en/staking/deposit-contract/"},"Deposit contract"),"\nor to ",(0,r.kt)("a",{parentName:"p",href:"/contracts/withdrawal-queue-erc721"},(0,r.kt)("inlineCode",{parentName:"a"},"WithdrawalsQueueERC721")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getBufferedEther() returns (uint256)\n")),(0,r.kt)("h3",{id:"getbeaconstat"},"getBeaconStat()"),(0,r.kt)("p",null,"Returns the key values related to Beacon chain."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getBeaconStat() returns (\n    uint256 depositedValidators,\n    uint256 beaconValidators,\n    uint256 beaconBalance\n)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"depositedValidators")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Number of the ever deposited Lido-participating validators")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"beaconValidators")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Number of Lido's validators visible in the Beacon state, reported by oracles")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"beaconBalance")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Total amount of Beacon-side ether (sum of all the balances of Lido validators)")))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"depositedValidators")," is always greater or equals to ",(0,r.kt)("inlineCode",{parentName:"p"},"beaconValidators"))),(0,r.kt)("h3",{id:"isstakingpaused"},"isStakingPaused()"),(0,r.kt)("p",null,"Returns staking state: whether it's paused or not."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function isStakingPaused() returns (bool)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"'staking' here means the ability to accept new ",(0,r.kt)("a",{parentName:"p",href:"/contracts/lido#submit"},"submit")," requests")),(0,r.kt)("h3",{id:"getcurrentstakelimit"},"getCurrentStakeLimit()"),(0,r.kt)("p",null,"Returns how much ether can be staked in the current block."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getCurrentStakeLimit() returns (uint256)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Special return values:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"2^256 - 1")," if staking is unlimited;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0")," if staking is paused or if limit is exhausted."))),(0,r.kt)("h3",{id:"getstakelimitfullinfo"},"getStakeLimitFullInfo()"),(0,r.kt)("p",null,"Returns full info about current stake limit params and state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getStakeLimitFullInfo() returns (\n    bool isStakingPaused,\n    bool isStakingLimitSet,\n    uint256 currentStakeLimit,\n    uint256 maxStakeLimit,\n    uint256 maxStakeLimitGrowthBlocks,\n    uint256 prevStakeLimit,\n    uint256 prevStakeBlockNumber\n)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isStakingPaused")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Staking pause state (equivalent to return of ",(0,r.kt)("inlineCode",{parentName:"td"},"isStakingPaused()"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isStakingLimitSet")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the stake limit is set or not")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"currentStakeLimit")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Current stake limit (equivalent to return of ",(0,r.kt)("inlineCode",{parentName:"td"},"getCurrentStakeLimit()"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"maxStakeLimit")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Max stake limit")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"maxStakeLimitGrowthBlocks")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Blocks needed to restore max stake limit from the fully exhausted state")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prevStakeLimit")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Previously reached stake limit")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prevStakeBlockNumber")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Previously seen block number")))),(0,r.kt)("h3",{id:"gettotalelrewardscollected"},"getTotalELRewardsCollected()"),(0,r.kt)("p",null,"Returns the total amount of execution layer rewards collected to Lido contract buffer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getTotalELRewardsCollected() returns (uint256)\n")),(0,r.kt)("h3",{id:"getdepositableether"},"getDepositableEther()"),(0,r.kt)("p",null,"Returns amount of ether available to deposit."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getDepositableEther() returns (uint256)\n")),(0,r.kt)("h3",{id:"candeposit"},"canDeposit()"),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if depositing buffered ether to the consensus layer is allowed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function canDeposit() returns (bool)\n")),(0,r.kt)("h3",{id:"getlidolocator"},"getLidoLocator()"),(0,r.kt)("p",null,"Returns the address of ",(0,r.kt)("a",{parentName:"p",href:"/contracts/lido-locator"},"LidoLocator"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getLidoLocator() returns (address)\n")),(0,r.kt)("h3",{id:"getcontractversion"},"getContractVersion()"),(0,r.kt)("p",null,"Returns the current contract version."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getContractVersion() returns (uint256)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Always returns ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),".")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"transfer"},"transfer()"),(0,r.kt)("p",null,"Moves ",(0,r.kt)("inlineCode",{parentName:"p"},"_amount")," tokens from the caller's account to the ",(0,r.kt)("inlineCode",{parentName:"p"},"_recipient")," account."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function transfer(address _recipient, uint256 _amount) returns (bool)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Requirements:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_recipient")," cannot be the zero address or stETH contract itself."),(0,r.kt)("li",{parentName:"ul"},"the caller must have a balance of at least ",(0,r.kt)("inlineCode",{parentName:"li"},"_amount"),"."),(0,r.kt)("li",{parentName:"ul"},"the contract must not be paused."))),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_recipient")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address of tokens recipient")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_amount")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Amount of tokens to transfer")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,"A boolean value indicating whether the operation succeeded."),(0,r.kt)("h3",{id:"transfershares"},"transferShares()"),(0,r.kt)("p",null,"Moves  token shares from the caller's account to the provided recipient account."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function transferShares(address _recipient, uint256 _sharesAmount) returns (uint256)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Requirements:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_recipient")," cannot be the zero address or stETH contract itself."),(0,r.kt)("li",{parentName:"ul"},"the caller must have at least ",(0,r.kt)("inlineCode",{parentName:"li"},"_sharesAmount")," shares."),(0,r.kt)("li",{parentName:"ul"},"the contract must not be paused."))),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_recipient")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address of shares recipient")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_sharesAmount")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Amount of shares to transfer")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,"Amount of transferred tokens."),(0,r.kt)("h3",{id:"approve"},"approve()"),(0,r.kt)("p",null,"Sets ",(0,r.kt)("inlineCode",{parentName:"p"},"_amount")," as the allowance of ",(0,r.kt)("inlineCode",{parentName:"p"},"_spender")," over the caller's tokens"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function approve(address _spender, uint256 _amount) returns (bool)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Requirements:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_spender")," cannot be the zero address."),(0,r.kt)("li",{parentName:"ul"},"the contract must not be paused."))),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_spender")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address of spender")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_amount")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Amount of tokens")))),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,"A boolean value indicating whether the operation succeeded."),(0,r.kt)("h3",{id:"permit"},"permit()"),(0,r.kt)("p",null,"Sets ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," as the allowance of ",(0,r.kt)("inlineCode",{parentName:"p"},"spender")," over ",(0,r.kt)("inlineCode",{parentName:"p"},"owner"),"'s tokens, given ",(0,r.kt)("inlineCode",{parentName:"p"},"owner"),"'s signed approval."),(0,r.kt)("p",null,"Emits an Approval event."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Requirements:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"spender")," cannot be the zero address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deadline")," must be a timestamp in the future."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"v"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"r")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"s")," must be a valid ",(0,r.kt)("inlineCode",{parentName:"li"},"secp256k1")," signature from ",(0,r.kt)("inlineCode",{parentName:"li"},"owner"),"\nover the EIP712-formatted function arguments."),(0,r.kt)("li",{parentName:"ul"},"the signature must use ",(0,r.kt)("inlineCode",{parentName:"li"},"owner"),"'s current nonce (see {nonces})."))),(0,r.kt)("h3",{id:"transferfrom"},"transferFrom()"),(0,r.kt)("p",null,"Moves ",(0,r.kt)("inlineCode",{parentName:"p"},"_amount")," tokens from ",(0,r.kt)("inlineCode",{parentName:"p"},"_sender")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"_recipient")," using the\nallowance mechanism. ",(0,r.kt)("inlineCode",{parentName:"p"},"_amount")," is then deducted from the caller's\nallowance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function transferFrom(\n    address _sender,\n    address _recipient,\n    uint256 _amount\n) returns (bool)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Requirements:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_sender")," cannot be the zero addresses."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_recipient")," cannot be the zero address or stETH contract itself."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_sender")," must have a balance of at least ",(0,r.kt)("inlineCode",{parentName:"li"},"_amount"),"."),(0,r.kt)("li",{parentName:"ul"},"the caller must have allowance for ",(0,r.kt)("inlineCode",{parentName:"li"},"_sender"),"'s tokens of at least ",(0,r.kt)("inlineCode",{parentName:"li"},"_amount"),"."),(0,r.kt)("li",{parentName:"ul"},"the contract must not be paused."))),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_sender")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address of spender")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_recipient")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address of recipient")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_amount")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Amount of tokens")))),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,"A boolean value indicating whether the operation succeeded."),(0,r.kt)("h3",{id:"transfersharesfrom"},"transferSharesFrom()"),(0,r.kt)("p",null,"Moves ",(0,r.kt)("inlineCode",{parentName:"p"},"_sharesAmount")," token shares from the ",(0,r.kt)("inlineCode",{parentName:"p"},"_sender")," account to the ",(0,r.kt)("inlineCode",{parentName:"p"},"_recipient")," using the allowance mechanism. The amount of tokens equivalent to ",(0,r.kt)("inlineCode",{parentName:"p"},"_sharesAmount")," is then deducted from the caller's allowance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function transferSharesFrom(\n    address _sender,\n    address _recipient,\n    uint256 _sharesAmount\n) returns (uint256)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Requirements:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_sender")," cannot be the zero address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_recipient")," cannot be the zero address or stETH contract itself."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_sender")," must have at least ",(0,r.kt)("inlineCode",{parentName:"li"},"_sharesAmount")," shares."),(0,r.kt)("li",{parentName:"ul"},"the caller must have allowance for ",(0,r.kt)("inlineCode",{parentName:"li"},"_sender"),"'s tokens of at least ",(0,r.kt)("inlineCode",{parentName:"li"},"getPooledEthByShares(_sharesAmount)"),"."),(0,r.kt)("li",{parentName:"ul"},"the contract must not be paused."))),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_sender")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address of spender")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_recipient")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address of recipient")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_sharesAmount")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Amount of shares")))),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,"Amount of transferred tokens."),(0,r.kt)("h3",{id:"increaseallowance"},"increaseAllowance()"),(0,r.kt)("p",null,"Atomically increases the allowance granted to ",(0,r.kt)("inlineCode",{parentName:"p"},"_spender")," by the caller by ",(0,r.kt)("inlineCode",{parentName:"p"},"_addedValue"),"."),(0,r.kt)("p",null,"This is an alternative to ",(0,r.kt)("inlineCode",{parentName:"p"},"approve")," that can be used as a mitigation for problems described ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function increaseAllowance(address _spender, uint256 _addedValue) returns (bool)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Requirements:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_spender")," cannot be the the zero address."),(0,r.kt)("li",{parentName:"ul"},"the contract must not be paused."))),(0,r.kt)("h4",{id:"parameters-6"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_sender")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address of spender")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_addedValue")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Amount of tokens to increase allowance")))),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,"Returns a boolean value indicating whether the operation succeeded"),(0,r.kt)("h3",{id:"decreaseallowance"},"decreaseAllowance()"),(0,r.kt)("p",null,"Atomically decreases the allowance granted to ",(0,r.kt)("inlineCode",{parentName:"p"},"_spender")," by the caller by ",(0,r.kt)("inlineCode",{parentName:"p"},"_subtractedValue"),"."),(0,r.kt)("p",null,"This is an alternative to ",(0,r.kt)("inlineCode",{parentName:"p"},"approve")," that can be used as a mitigation for\nproblems described ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function decreaseAllowance(address _spender, uint256 _subtractedValue) returns (bool)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Requirements:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_spender")," cannot be the zero address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_spender")," must have allowance for the caller of at least ",(0,r.kt)("inlineCode",{parentName:"li"},"_subtractedValue"),"."),(0,r.kt)("li",{parentName:"ul"},"the contract must not be paused."))),(0,r.kt)("h4",{id:"parameters-7"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_sender")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address of spender")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_subtractedValue")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Amount of tokens to decrease allowance")))),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,"Returns a boolean value indicating whether the operation succeeded."),(0,r.kt)("h3",{id:"submit-1"},"submit()"),(0,r.kt)("p",null,"Send funds to the pool with optional ",(0,r.kt)("inlineCode",{parentName:"p"},"_referral")," parameter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function submit(address _referral) payable returns (uint256)\n")),(0,r.kt)("h4",{id:"parameters-8"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_referral")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional referral address")))),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,"Amount of StETH shares generated."),(0,r.kt)("h3",{id:"deposit-1"},"deposit()"),(0,r.kt)("p",null,"Deposit buffered ether to StakingRouter's module with id of ",(0,r.kt)("inlineCode",{parentName:"p"},"_stakingModuleId"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function deposit(uint256 _maxDeposits, uint256 _stakingModuleId, bytes _depositCalldata)\n")),(0,r.kt)("h4",{id:"parameters-9"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_maxDeposits")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Number of max deposit calls")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_stakingModuleId")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Id of the staking module to be deposited")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_depositCalldata")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bytes")),(0,r.kt)("td",{parentName:"tr",align:null},"module calldata")))),(0,r.kt)("h3",{id:"stop"},"stop()"),(0,r.kt)("p",null,"Stop pool routine operations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function stop()\n")),(0,r.kt)("h3",{id:"resume"},"resume()"),(0,r.kt)("p",null,"Resume pool routine operations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function resume()\n")),(0,r.kt)("h3",{id:"pausestaking"},"pauseStaking()"),(0,r.kt)("p",null,"Stops accepting new ether to the protocol."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"While accepting new ether is stopped, calls to the ",(0,r.kt)("inlineCode",{parentName:"p"},"submit")," function,\nas well as to the default payable function, will revert.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function pauseStaking()\n")),(0,r.kt)("h3",{id:"resumestaking"},"resumeStaking()"),(0,r.kt)("p",null,"Resumes accepting new ether to the protocol (if ",(0,r.kt)("inlineCode",{parentName:"p"},"pauseStaking")," was called previously)."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Staking could be rate-limited by imposing a limit on the stake amount at each moment in time,\nsee ",(0,r.kt)("a",{parentName:"p",href:"/contracts/lido#setstakinglimit"},(0,r.kt)("inlineCode",{parentName:"a"},"setStakingLimit()"))," and ",(0,r.kt)("a",{parentName:"p",href:"/contracts/lido#removestakinglimit"},(0,r.kt)("inlineCode",{parentName:"a"},"removeStakingLimit()")),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function resumeStaking()\n")),(0,r.kt)("h3",{id:"setstakinglimit"},"setStakingLimit()"),(0,r.kt)("p",null,"Sets the staking rate limit."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Reverts if:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_maxStakeLimit")," == 0"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_maxStakeLimit")," >= 2^96"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_maxStakeLimit")," < ",(0,r.kt)("inlineCode",{parentName:"li"},"_stakeLimitIncreasePerBlock")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_maxStakeLimit")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"_stakeLimitIncreasePerBlock")," >= 2^32 (only if ",(0,r.kt)("inlineCode",{parentName:"li"},"_stakeLimitIncreasePerBlock")," != 0)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function setStakingLimit(uint256 _maxStakeLimit, uint256 _stakeLimitIncreasePerBlock)\n")),(0,r.kt)("h4",{id:"parameters-10"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_maxStakeLimit")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Max stake limit value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_stakeLimitIncreasePerBlock")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Stake limit increase per single block")))),(0,r.kt)("p",null,"Limit explanation scheme:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-txt"},"    * \u25b2 Stake limit\n    * \u2502.....  .....   ........ ...            ....     ... Stake limit = max\n    * \u2502      .       .        .   .   .      .    . . .\n    * \u2502     .       .              . .  . . .      . .\n    * \u2502            .                .  . . .\n    * \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500> Time\n    * \u2502     ^      ^          ^   ^^^  ^ ^ ^     ^^^ ^     Stake events\n")),(0,r.kt)("h3",{id:"removestakinglimit"},"removeStakingLimit()"),(0,r.kt)("p",null,"Removes the staking rate limit."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function removeStakingLimit()\n")),(0,r.kt)("h3",{id:"receiveelrewards"},"receiveELRewards()"),(0,r.kt)("p",null,"A payable function for execution layer rewards,\ncan be called only by the ",(0,r.kt)("a",{parentName:"p",href:"/contracts/lido-execution-layer-rewards-vault"},(0,r.kt)("inlineCode",{parentName:"a"},"LidoExecutionLayerRewardsVault"))," contract."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function receiveELRewards() payable\n")),(0,r.kt)("h3",{id:"receivewithdrawals"},"receiveWithdrawals()"),(0,r.kt)("p",null,"A payable function for withdrawals acquisition. Can be called only by ",(0,r.kt)("a",{parentName:"p",href:"/contracts/withdrawal-vault"},(0,r.kt)("inlineCode",{parentName:"a"},"WithdrawalVault")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function receiveWithdrawals() payable\n")),(0,r.kt)("h3",{id:"handleoraclereport"},"handleOracleReport()"),(0,r.kt)("p",null,"Updates accounting stats, collects EL rewards and distributes collected rewards if beacon balance increased,\nperforms withdrawal requests finalization."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function handleOracleReport(\n    uint256 _reportTimestamp,\n    uint256 _timeElapsed,\n    uint256 _clValidators,\n    uint256 _clBalance,\n    uint256 _withdrawalVaultBalance,\n    uint256 _elRewardsVaultBalance,\n    uint256 _sharesRequestedToBurn,\n    uint256[] _withdrawalFinalizationBatches,\n    uint256 _simulatedShareRate\n) returns (uint256[4] postRebaseAmounts)\n")),(0,r.kt)("h4",{id:"parameters-11"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_reportTimestamp")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"The moment of the oracle report calculation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_timeElapsed")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Seconds elapsed since the previous report calculation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_clValidators")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Number of Lido validators on Consensus Layer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_clBalance")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Sum of all Lido validators' balances on Consensus Layer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_withdrawalVaultBalance")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Withdrawal vault balance on Execution Layer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_elRewardsVaultBalance")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"elRewards vault balance on Execution Layer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_sharesRequestedToBurn")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"shares requested to burn through Burner")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_withdrawalFinalizationBatches")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256[]")),(0,r.kt)("td",{parentName:"tr",align:null},"the ascendingly-sorted array of withdrawal request IDs to finalize")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_simulatedShareRate")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"share rate simulated by oracle when (1e27 precision)")))),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"postRebaseAmounts[0]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"postTotalPooledEther")," amount of ether in the protocol")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"postRebaseAmounts[1]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"postTotalShares")," amount of shares in the protocol")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"postRebaseAmounts[2]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"withdrawals")," withdrawn from the withdrawals vault")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"postRebaseAmounts[3]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"elRewards")," withdrawn from the execution layer rewards vault")))),(0,r.kt)("h3",{id:"unsafechangedepositedvalidators"},"unsafeChangeDepositedValidators()"),(0,r.kt)("p",null,"Unsafely change deposited validators counter."),(0,r.kt)("p",null,"The method unsafely changes deposited validator counter.\nCan be required when onboarding external validators to Lido (i.e., had deposited before and rotated their type-0x00 withdrawal credentials to Lido)."),(0,r.kt)("p",null,"Can only be called by the bearer of ",(0,r.kt)("inlineCode",{parentName:"p"},"UNSAFE_CHANGE_DEPOSITED_VALIDATORS_ROLE")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"The method might break the internal protocol state if applied incorrectly")),(0,r.kt)("h4",{id:"parameters-12"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_newDepositedValidators")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"New value for the deposited validators counter")))),(0,r.kt)("h3",{id:"transfertovault"},"transferToVault()"),(0,r.kt)("p",null,"Overrides default AragonApp behaviour to disallow recovery."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function transferToVault(address _token)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Always reverts with ",(0,r.kt)("inlineCode",{parentName:"p"},"NOT_SUPPORTED"))),(0,r.kt)("h4",{id:"parameters-13"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_token")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Token to be sent to recovery vault")))))}m.isMDXComponent=!0}}]);