"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7885],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,h=u["".concat(i,".").concat(m)]||u[m]||d[m]||s;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[u]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<s;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},112:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>i});var r=n(7462),o=(n(7294),n(3905));const s={},a="HashConsensus",c={unversionedId:"contracts/hash-consensus",id:"contracts/hash-consensus",title:"HashConsensus",description:"- Source code",source:"@site/docs/contracts/hash-consensus.md",sourceDirName:"contracts",slug:"/contracts/hash-consensus",permalink:"/contracts/hash-consensus",editUrl:"https://github.com/lidofinance/docs/blob/main/docs/contracts/hash-consensus.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"ValidatorsExitBusOracle",permalink:"/contracts/validators-exit-bus-oracle"},next:{title:"LegacyOracle",permalink:"/contracts/legacy-oracle"}},i=[],l={toc:i};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"hashconsensus"},"HashConsensus"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/lidofinance/lido-dao/blob/master/contracts/0.8.9/oracle/HashConsensus.sol"},"Source code")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://etherscan.io/address/0xD624B08C83bAECF0807Dd2c6880C3154a5F0B288"},"Deployed instance for AccountingOracle")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://etherscan.io/address/0x7FaDB6358950c5fAA66Cb5EB8eE5147De3df355a"},"Deployed instance for ValidatorsExitBusOracle"))),(0,o.kt)("p",null,"HashConsensus is a contract that gets consensus reports (i.e. hashes) pushed to and processes them asynchronously."),(0,o.kt)("p",null,"HashConsensus doesn't expect any specific behavior from a report processor, and guarantees the following:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"HashConsensus won't submit reports via ",(0,o.kt)("inlineCode",{parentName:"p"},"IReportAsyncProcessor.submitConsensusReport")," or ask to discard\nreports via ",(0,o.kt)("inlineCode",{parentName:"p"},"IReportAsyncProcessor.discardConsensusReport")," for any slot up to (and including)\nthe slot returned from ",(0,o.kt)("inlineCode",{parentName:"p"},"IReportAsyncProcessor.getLastProcessingRefSlot"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"HashConsensus won't accept member reports (and thus won't include such reports in calculating the consensus)\nthat have ",(0,o.kt)("inlineCode",{parentName:"p"},"consensusVersion")," argument of the ",(0,o.kt)("inlineCode",{parentName:"p"},"HashConsensus.submitReport")," call holding a diff.\nvalue than the one returned from ",(0,o.kt)("inlineCode",{parentName:"p"},"IReportAsyncProcessor.getConsensusVersion()"),"\nat the moment of the ",(0,o.kt)("inlineCode",{parentName:"p"},"HashConsensus.submitReport")," call."))))}p.isMDXComponent=!0}}]);