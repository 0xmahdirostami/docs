"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4035],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),d=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=d(a),u=r,h=c["".concat(p,".").concat(u)]||c[u]||m[u]||l;return a?n.createElement(h,o(o({ref:t},s),{},{components:a})):n.createElement(h,o({ref:t},s))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var d=2;d<l;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6522:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var n=a(3117),r=(a(7294),a(3905));const l={},o="LegacyOracle",i={unversionedId:"contracts/legacy-oracle",id:"contracts/legacy-oracle",title:"LegacyOracle",description:"- Source code",source:"@site/docs/contracts/legacy-oracle.md",sourceDirName:"contracts",slug:"/contracts/legacy-oracle",permalink:"/contracts/legacy-oracle",draft:!1,editUrl:"https://github.com/lidofinance/docs/blob/main/docs/contracts/legacy-oracle.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"HashConsensus",permalink:"/contracts/hash-consensus"},next:{title:"OracleReportSanityChecker",permalink:"/contracts/oracle-report-sanity-checker"}},p={},d=[{value:"What is LegacyOracle?",id:"what-is-legacyoracle",level:2},{value:"Key changes",id:"key-changes",level:2},{value:"How does LegacyOracle receive the AccountingOracle reports anyway (flow)",id:"how-does-legacyoracle-receive-the-accountingoracle-reports-anyway-flow",level:3},{value:"Rebase and APR",id:"rebase-and-apr",level:3},{value:"How it was with LidoOracle",id:"how-it-was-with-lidooracle",level:4},{value:"What&#39;s new from Lido V2",id:"whats-new-from-lido-v2",level:4},{value:"Why does it matter",id:"why-does-it-matter",level:4},{value:"View Methods",id:"view-methods",level:2},{value:"getLido()",id:"getlido",level:3},{value:"getAccountingOracle()",id:"getaccountingoracle",level:3},{value:"getContractVersion()",id:"getcontractversion",level:3},{value:"getVersion()",id:"getversion",level:3},{value:"getBeaconSpec()",id:"getbeaconspec",level:3},{value:"Returns",id:"returns",level:4},{value:"getCurrentEpochId()",id:"getcurrentepochid",level:3},{value:"getCurrentFrame()",id:"getcurrentframe",level:3},{value:"Returns",id:"returns-1",level:4},{value:"getLastCompletedEpochId()",id:"getlastcompletedepochid",level:3},{value:"getLastCompletedReportDelta()",id:"getlastcompletedreportdelta",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Methods",id:"methods",level:2},{value:"handlePostTokenRebase()",id:"handleposttokenrebase",level:3},{value:"Parameters",id:"parameters",level:4},{value:"handleConsensusLayerReport()",id:"handleconsensuslayerreport",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Events",id:"events",level:2},{value:"Completed()",id:"completed",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"PostTotalShares()",id:"posttotalshares",level:3},{value:"Parameters",id:"parameters-3",level:4}],s={toc:d},c="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"legacyoracle"},"LegacyOracle"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lidofinance/lido-dao/blob/master/contracts/0.4.24/oracle/LegacyOracle.sol"},"Source code")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://etherscan.io/address/0x442af784A788A5bd6F42A01Ebe9F287a871243fb"},"Deployed contract"))),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"LegacyOracle")," will be maintained till the end of 2023.\nAfterwards, it will be discontinued and external integrations should rely on ",(0,r.kt)("a",{parentName:"p",href:"/contracts/accounting-oracle"},(0,r.kt)("inlineCode",{parentName:"a"},"AccountingOracle")),".")),(0,r.kt)("h2",{id:"what-is-legacyoracle"},"What is LegacyOracle?"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LegacyOracle")," is an Aragon app previously known as ",(0,r.kt)("inlineCode",{parentName:"p"},"LidoOracle"),", used to track changes on the Beacon Chain.\nFollowing the Lido V2 upgrade, this was replaced by the ",(0,r.kt)("a",{parentName:"p",href:"/contracts/accounting-oracle"},(0,r.kt)("inlineCode",{parentName:"a"},"AccountingOracle")),"\nand the oracle workflow was redesigned to deliver synchronized historical data chunks for the same reference slot\nboth for the Consensus and Execution Layer parts."),(0,r.kt)("h2",{id:"key-changes"},"Key changes"),(0,r.kt)("p",null,"In Lido V2, ",(0,r.kt)("inlineCode",{parentName:"p"},"LegacyOracle")," only supports a subset of view functions and events.\n",(0,r.kt)("inlineCode",{parentName:"p"},"AccountingOracle")," interacts with it to push data changes on each report."),(0,r.kt)("h3",{id:"how-does-legacyoracle-receive-the-accountingoracle-reports-anyway-flow"},"How does LegacyOracle receive the AccountingOracle reports anyway (flow)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"LegacyOracle")," contract receives the data changes on each ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountingOracle")," report using two stages\n(still within the same transaction):"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Invoke ",(0,r.kt)("a",{parentName:"li",href:"/contracts/legacy-oracle#handleConsensusLayerReport"},(0,r.kt)("inlineCode",{parentName:"a"},"handleConsensusLayerReport")),"\nproviding the reference slot and validators data from ",(0,r.kt)("inlineCode",{parentName:"li"},"AccountingOracle")," itself."),(0,r.kt)("li",{parentName:"ol"},"Invoke ",(0,r.kt)("a",{parentName:"li",href:"/contracts/legacy-oracle#handlePostTokenRebase"},(0,r.kt)("inlineCode",{parentName:"a"},"handlePostTokenRebase")),"\nfrom ",(0,r.kt)("a",{parentName:"li",href:"/contracts/lido"},(0,r.kt)("inlineCode",{parentName:"a"},"Lido")),".")),(0,r.kt)("mermaid",{value:"graph LR;\n  A[/  \\]--submitReportData--\x3eAccountingOracle--handleConsensusLayerReport---\x3eLegacyOracle;\n  AccountingOracle--handleOracleReport--\x3eLido--handlePostTokenRebase--\x3eLegacyOracle"}),(0,r.kt)("h3",{id:"rebase-and-apr"},"Rebase and APR"),(0,r.kt)("p",null,"To calculate the protocol's daily rebase and APR projections one would use the old ",(0,r.kt)("inlineCode",{parentName:"p"},"LidoOracle")," APIs for a while.\nAlthough the old way of calculating the APR would still result in relevant numbers, the math might be off in case of significant withdrawals."),(0,r.kt)("h4",{id:"how-it-was-with-lidooracle"},"How it was with LidoOracle"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The formula is outdated and inaccurate since the ",(0,r.kt)("a",{parentName:"p",href:"https://blog.lido.fi/lido-v2-launch/"},"Lido V2 upgrade")," happened.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"protocolAPR = (postTotalPooledEther - preTotalPooledEther) * secondsInYear / (preTotalPooledEther * timeElapsed)\nlidoFeeAsFraction = lidoFee / basisPoint\nuserAPR = protocolAPR * (1 - lidoFeeAsFraction)\n")),(0,r.kt)("h4",{id:"whats-new-from-lido-v2"},"What's new from Lido V2"),(0,r.kt)("p",null,"See the new Lido API docs with regards to ",(0,r.kt)("a",{parentName:"p",href:"/integrations/api#LidoAPR"},"APR"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Emits when token rebased (total supply and/or total shares were changed)\nevent TokenRebased(\n    uint256 indexed reportTimestamp,\n    uint256 timeElapsed,\n    uint256 preTotalShares,\n    uint256 preTotalEther, /* preTotalPooledEther */\n    uint256 postTotalShares,\n    uint256 postTotalEther, /* postTotalPooledEther */\n    uint256 sharesMintedAsFees /* fee part included in `postTotalShares` */\n);\n\npreShareRate = preTotalEther * 1e27 / preTotalShares\npostShareRate = postTotalEther * 1e27 / postTotalShares\n\nuserAPR =\n    secondsInYear * (\n        (postShareRate - preShareRate) / preShareRate\n    ) / timeElapsed\n")),(0,r.kt)("p",null,"In short, the new formula takes into account both ",(0,r.kt)("inlineCode",{parentName:"p"},"preTotalShares")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"postTotalShares")," values, while,\nin contrast, the old formula didn't use them. The new formula also doesn't require to calculate ",(0,r.kt)("inlineCode",{parentName:"p"},"lidoFee"),"\nat all (because the fee distribution works by changing the total shares amount under the hood)."),(0,r.kt)("h4",{id:"why-does-it-matter"},"Why does it matter"),(0,r.kt)("p",null,"When Lido V2 protocol finalizes withdrawal requests, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Lido")," contract sends ether to ",(0,r.kt)("inlineCode",{parentName:"p"},"WithdrawalQueue")," (excluding these funds from ",(0,r.kt)("inlineCode",{parentName:"p"},"totalPooledEther"),", i.e., decreasing TVL) and assigns to burn underlying locked requests' ",(0,r.kt)("inlineCode",{parentName:"p"},"stETH")," shares in return."),(0,r.kt)("p",null,"In other words, withdrawal finalization decreases both TVL and total shares."),(0,r.kt)("p",null,"Old formula isn't suitable anymore because it catches TVL changes, but skips total shares changes."),(0,r.kt)("p",null,"Illustrative example (using smallish numbers far from the real ones for simplicity):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"preTotalEther = 1000 ETH\npreTotalShares = 1000 * 10^18 // 1 share : 1 wei\n\npostTotalEther = 999 ETH\npostTotalShares = 990 * 10^18\n\ntimeElapsed = 24 * 60 * 60 // 1 day, or 86400 seconds\n\n//!!! using the old (imprecise) method\n\n// protocolAPR = (postTotalPooledEther - preTotalPooledEther) * secondsInYear / (preTotalPooledEther * timeElapsed)\nprotocolAPR = (999ETH - 1000ETH) * 31557600 / (1000ETH * 86400) = -0.36525\n//lidoFeeAsFraction = lidoFee / basisPoint = 0.1\n//userAPR = protocolAPR * (1 - lidoFeeAsFraction) = protocolAPR * (1 - 0.1)\n\nuserAPR = -0.36525 * (1 - 0.1) = -0.328725\n\n//!!! i.e, userAPR now is ~minus 32.9%\n\n//!!! using the updated (proper) method\n\npreShareRate = 1000 ETH * 1e27 / 1000 * 10^18 = 1e27\npostShareRate = 999 ETH * 1e27 / 990 * 10^18 = 1.009090909090909e+27\nuserAPR = 31557600 * ((postShareRate - preShareRate) / preShareRate) / 86400 = 3.320454545454529\n\n//!!! i.e., userAPR now is ~plus 332%\n")),(0,r.kt)("h2",{id:"view-methods"},"View Methods"),(0,r.kt)("h3",{id:"getlido"},"getLido()"),(0,r.kt)("p",null,"Returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"Lido")," contract address."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getLido() returns (address)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Always returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"Lido")," address stated in the ",(0,r.kt)("a",{parentName:"p",href:"/deployed-contracts"},"deployed addresses")," list.")),(0,r.kt)("h3",{id:"getaccountingoracle"},"getAccountingOracle()"),(0,r.kt)("p",null,"Returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountingOracle")," contract address."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getAccountingOracle() returns (address)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Always returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountingOracle")," address stated in the ",(0,r.kt)("a",{parentName:"p",href:"/deployed-contracts"},"deployed addresses")," list.")),(0,r.kt)("h3",{id:"getcontractversion"},"getContractVersion()"),(0,r.kt)("p",null,"Returns the current contract version."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getContractVersion() returns (uint256)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Always returns ",(0,r.kt)("inlineCode",{parentName:"p"},"4"),".")),(0,r.kt)("h3",{id:"getversion"},"getVersion()"),(0,r.kt)("p",null,"Returns the current contract version (compatibility method)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getVersion() returns (uint256)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Always returns ",(0,r.kt)("inlineCode",{parentName:"p"},"4"),", calls ",(0,r.kt)("inlineCode",{parentName:"p"},"getContractVersion()")," internally.")),(0,r.kt)("h3",{id:"getbeaconspec"},"getBeaconSpec()"),(0,r.kt)("p",null,"Returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountingOracle")," frame period together with Ethereum Beacon Chain specification constants."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getBeaconSpec() returns (\n    uint64 epochsPerFrame,\n    uint64 slotsPerEpoch,\n    uint64 secondsPerSlot,\n    uint64 genesisTime\n)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Always returns (225, 32, 12, 1606824023) for Mainnet and (225, 32, 12, 1616508000) for G\xf6rli.")),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"epochsPerFrame")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint64")),(0,r.kt)("td",{parentName:"tr",align:null},"Beacon Chain epochs per single ",(0,r.kt)("inlineCode",{parentName:"td"},"AccountingOracle")," report frame")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"slotsPerEpoch")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint64")),(0,r.kt)("td",{parentName:"tr",align:null},"Beacon Chain slots per single Beacon Chain epoch")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"secondsPerSlot")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint64")),(0,r.kt)("td",{parentName:"tr",align:null},"Seconds per single Beacon Chain slot")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"genesisTime")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint64")),(0,r.kt)("td",{parentName:"tr",align:null},"Beacon Chain genesis timestamp")))),(0,r.kt)("h3",{id:"getcurrentepochid"},"getCurrentEpochId()"),(0,r.kt)("p",null,"Returns the Beacon Chain epoch id calculated from the current timestamp using the ",(0,r.kt)("a",{parentName:"p",href:"/contracts/legacy-oracle#getBeaconSpec"},"beacon chain spec"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getCurrentEpochId() returns (uint256)\n")),(0,r.kt)("h3",{id:"getcurrentframe"},"getCurrentFrame()"),(0,r.kt)("p",null,"Returns the first epoch of the current ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountingOracle")," reporting frame as well as its start and end times in seconds."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getCurrentFrame() returns (\n    uint256 frameEpochId,\n    uint256 frameStartTime,\n    uint256 frameEndTime\n)\n")),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"frameEpochId")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"The first epoch of the current ",(0,r.kt)("inlineCode",{parentName:"td"},"AccountingOracle")," reporting frame")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"frameStartTime")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"The start timestamp of the current reporting frame")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"frameEndTime")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"The end timestamp of the current reporting frame")))),(0,r.kt)("h3",{id:"getlastcompletedepochid"},"getLastCompletedEpochId()"),(0,r.kt)("p",null,"Returns the starting epoch of the last frame in which the last ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountingOracle")," report was received and applied."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getLastCompletedEpochId() returns (uint256)\n")),(0,r.kt)("h3",{id:"getlastcompletedreportdelta"},"getLastCompletedReportDelta()"),(0,r.kt)("p",null,"Returns the total supply change ocurred with the last completed ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountingOracle")," report."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function getLastCompletedReportDelta() returns (\n    uint256 postTotalPooledEther,\n    uint256 preTotalPooledEther,\n    uint256 timeElapsed\n)\n")),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"postTotalPooledEther")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Post-report `stETH`` total pooled ether (i.e., total supply)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"preTotalPooledEther")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Pre-report ",(0,r.kt)("inlineCode",{parentName:"td"},"stETH")," total pooled ether (i.e., total supply)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"timeElapsed")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Time elapsed since the previously completed report, seconds")))),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"handleposttokenrebase"},"handlePostTokenRebase()"),(0,r.kt)("p",null,"Handles a ",(0,r.kt)("inlineCode",{parentName:"p"},"stETH")," token rebase incurred by the succeeded ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountingOracle")," report storing\nthe total ether and time elapsed stats."),(0,r.kt)("p",null,"Emits ",(0,r.kt)("a",{parentName:"p",href:"/contracts/legacy-oracle#PostTotalShares"},(0,r.kt)("inlineCode",{parentName:"a"},"PostTotalShares"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function handlePostTokenRebase(\n    uint256 reportTimestamp,\n    uint256 timeElapsed,\n    uint256 preTotalShares,\n    uint256 preTotalEther,\n    uint256 postTotalShares,\n    uint256 postTotalEther,\n    uint256 totalSharesMintedAsFees\n)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The caller must be ",(0,r.kt)("inlineCode",{parentName:"p"},"Lido"),".")),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"reportTimestamp")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"The reference timestamp corresponding to the moment of the oracle report calculation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"timeElapsed")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Time elapsed since the previously completed report, seconds")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"preTotalShares")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Pre-report ",(0,r.kt)("inlineCode",{parentName:"td"},"stETH")," total shares")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"preTotalEther")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Pre-report ",(0,r.kt)("inlineCode",{parentName:"td"},"stETH")," total pooled ether (i.e., total supply)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"postTotalShares")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Post-report ",(0,r.kt)("inlineCode",{parentName:"td"},"stETH")," total shares")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"postTotalEther")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Post-report ",(0,r.kt)("inlineCode",{parentName:"td"},"stETH")," total pooled ether (i.e., total supply)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"totalSharesMintedAsFees")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Total shares amount minted as the protocol fees on top of the accrued rewards")))),(0,r.kt)("h3",{id:"handleconsensuslayerreport"},"handleConsensusLayerReport()"),(0,r.kt)("p",null,"Handles a new completed ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountingOracle")," report storing the corresponding Beacon Chain epoch id."),(0,r.kt)("p",null,"Emits ",(0,r.kt)("a",{parentName:"p",href:"/contracts/legacy-oracle#Completed"},(0,r.kt)("inlineCode",{parentName:"a"},"Completed")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"function handleConsensusLayerReport(\n    uint256 _refSlot,\n    uint256 _clBalance,\n    uint256 _clValidators\n)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The caller must be ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountingOracle"),".")),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_refSlot")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"The reference slot corresponding to the moment of the oracle report calculation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_clBalance")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Lido-participating validators balance on the Beacon Chain side")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"_clValidators")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Number of the Lido-participating validators on the Beacon Chain side")))),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("h3",{id:"completed"},"Completed()"),(0,r.kt)("p",null,"Emits whenever the ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountingOracle")," report landed."),(0,r.kt)("p",null,"This event is still emitted after oracle committee reaches consensus on a report, but only for compatibility purposes.\nThe values in this event are not enough to calculate APR or TVL anymore due to withdrawals, Execution Layer rewards, and Consensus Layer rewards skimming."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event Completed(\n    uint256 epochId,\n    uint128 beaconBalance,\n    uint128 beaconValidators\n);\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Emits inside the ",(0,r.kt)("a",{parentName:"p",href:"/contracts/legacy-oracle#handleConsensusLayerReport"},(0,r.kt)("inlineCode",{parentName:"a"},"handleConsensusLayerReport"))," methods.")),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"epochId")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Report reference epoch identifier")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"beaconBalance")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint128")),(0,r.kt)("td",{parentName:"tr",align:null},"The balance of the Lido-participating validators on the Consensus Layer side")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"beaconValidators")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint128")),(0,r.kt)("td",{parentName:"tr",align:null},"The number of the ever appeared Lido-participating validators")))),(0,r.kt)("h3",{id:"posttotalshares"},"PostTotalShares()"),(0,r.kt)("p",null,"Emits whenever the ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountingOracle")," report landed."),(0,r.kt)("p",null,"This event is still emitted after each rebase but only for compatibility purposes. The values in this event are not enough to correctly calculate the rebase APR since a rebase can result from shares burning without changing total ETH held by the protocol."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event PostTotalShares(\n    uint256 postTotalPooledEther,\n    uint256 preTotalPooledEther,\n    uint256 timeElapsed,\n    uint256 totalShares\n)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The new ",(0,r.kt)("a",{parentName:"p",href:"/contracts/lido#TokenRebased"},(0,r.kt)("inlineCode",{parentName:"a"},"TokenRebased"))," event emitted from the main Lido contract should be used instead because it provides the pre-report total shares amount as well which is essential to properly estimate a token rebase and its projected APR.")),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"postTotalPooledEther")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Post-report total pooled ether")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"preTotalPooledEther")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Pre-report total pooled ether")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"timeElapsed")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Time elapsed since the previous report, seconds")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"totalShares")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Post-report total shares")))))}m.isMDXComponent=!0}}]);