"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2311],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>g});var a=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,a,n=function(e,t){if(null==e)return{};var i,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var l=a.createContext({}),h=function(e){var t=a.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},d=function(e){var t=h(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var i=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=h(i),u=n,g=c["".concat(l,".").concat(u)]||c[u]||p[u]||r;return i?a.createElement(g,o(o({ref:t},d),{},{components:i})):a.createElement(g,o({ref:t},d))}));function g(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=i.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:n,o[1]=s;for(var h=2;h<r;h++)o[h]=i[h];return a.createElement.apply(null,o)}return a.createElement.apply(null,i)}u.displayName="MDXCreateElement"},2768:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>h});var a=i(3117),n=(i(7294),i(3905));const r={},o="Verifying address ownership for Lido DAO ops",s={unversionedId:"guides/address-ownership-guide",id:"guides/address-ownership-guide",title:"Verifying address ownership for Lido DAO ops",description:'Using EOA across Lido DAO ops or protocol contracts requires providing a public "proof of ownership". Main use-cases here are using address as a signer in Lido DAO ops multisigs or using EOAs for offchain tooling where specific rights might be required.',source:"@site/docs/guides/address-ownership-guide.md",sourceDirName:"guides",slug:"/guides/address-ownership-guide",permalink:"/guides/address-ownership-guide",draft:!1,editUrl:"https://github.com/lidofinance/docs/blob/main/docs/guides/address-ownership-guide.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Guide to Easy Track",permalink:"/guides/easy-track-guide"},next:{title:"Guide to being a signer at any Lido DAO multisigs",permalink:"/guides/multisig-signer-manual"}},l={},h=[{value:"Preparing and sharing address &amp; signature",id:"preparing-and-sharing-address--signature",level:2},{value:"In case of using externally owned account (EOA)",id:"in-case-of-using-externally-owned-account-eoa",level:3},{value:"In case of using Safe multisig",id:"in-case-of-using-safe-multisig",level:3},{value:"Ethereum signature verification",id:"ethereum-signature-verification",level:2},{value:"In case of using EOA",id:"in-case-of-using-eoa",level:3},{value:"Etherscan UI",id:"etherscan-ui",level:3},{value:"MyEtherWallet",id:"myetherwallet",level:3},{value:"Publishing the signature on Etherscan",id:"publishing-the-signature-on-etherscan",level:3},{value:"In case of using Safe multisig",id:"in-case-of-using-safe-multisig-1",level:3}],d={toc:h},c="wrapper";function p(e){let{components:t,...i}=e;return(0,n.kt)(c,(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"verifying-address-ownership-for-lido-dao-ops"},"Verifying address ownership for Lido DAO ops"),(0,n.kt)("p",null,'Using EOA across Lido DAO ops or protocol contracts requires providing a public "proof of ownership". Main use-cases here are using address as a signer in Lido DAO ops multisigs or using EOAs for offchain tooling where specific rights might be required.'),(0,n.kt)("h2",{id:"preparing-and-sharing-address--signature"},"Preparing and sharing address & signature"),(0,n.kt)("h3",{id:"in-case-of-using-externally-owned-account-eoa"},"In case of using externally owned account (EOA)"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Sign the message along the lines of ",(0,n.kt)("inlineCode",{parentName:"li"},"@my_social_handle is looking to join X Lido DAO multisig with address 0x...")," with the private key you're looking to use as signing key. One of the options is going using MyEtherWallet web UI:",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"Connect your wallet to ",(0,n.kt)("a",{parentName:"li",href:"https://www.myetherwallet.com/wallet/access"},"https://www.myetherwallet.com/wallet/access"),"."),(0,n.kt)("li",{parentName:"ol"},"Go to ",(0,n.kt)("a",{parentName:"li",href:"https://www.myetherwallet.com/wallet/sign"},"https://www.myetherwallet.com/wallet/sign"),' (UI link is under "Message" dropdown on the left).'),(0,n.kt)("li",{parentName:"ol"},'Enter the message, click "sign" and sign the message on the wallet.'),(0,n.kt)("li",{parentName:"ol"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"sig")," field in the result json is the signature hash."))),(0,n.kt)("li",{parentName:"ol"},"Publish the message along with the signature hash on twitter or other easily accessible social media."),(0,n.kt)("li",{parentName:"ol"},"Share the link to the post as a comment at the relevant ",(0,n.kt)("a",{parentName:"li",href:"https://research.lido.fi"},"Lido DAO forum")," post."),(0,n.kt)("li",{parentName:"ol"},"Make sure to follow the ",(0,n.kt)("a",{parentName:"li",href:"./multisig-signer-manual"},"general rules of thumb")," for being a signer in Lido DAO ops multisigs.")),(0,n.kt)("h3",{id:"in-case-of-using-safe-multisig"},"In case of using Safe multisig"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"In ",(0,n.kt)("a",{parentName:"li",href:"https://app.safe.global"},"https://app.safe.global"),' home screen of your multisig wallet hit the button "New transaction" and select "Contract interaction" in the appeared screen.'),(0,n.kt)("li",{parentName:"ol"},'At the New Transaction screen toggle "Custom data" switch.'),(0,n.kt)("li",{parentName:"ol"},"Fill any EOA address (for example ",(0,n.kt)("inlineCode",{parentName:"li"},"0x0000000000000000000000000000000000000000"),') into "Enter Address or ENS Name" field.'),(0,n.kt)("li",{parentName:"ol"},"Use any hex encoder (like ",(0,n.kt)("a",{parentName:"li",href:"https://www.duplichecker.com/hex-to-text.php"},"https://www.duplichecker.com/hex-to-text.php"),") to encode a message that consists info about who is joining what Lido committee or multisig with which address, for example ",(0,n.kt)("inlineCode",{parentName:"li"},"@my_social_handle is looking to join X Lido DAO multisig with address 0x..."),"."),(0,n.kt)("li",{parentName:"ol"},'Paste a code generated at the previous step into "Data (Hex encoded)" field of "New Transaction" screen in the multisig interface (add "0x" in the start of a HEX code if it\'s missing), put "0" in the ETH value field.'),(0,n.kt)("li",{parentName:"ol"},"Publish the message along with the transaction hash on twitter or other easily accessible social media."),(0,n.kt)("li",{parentName:"ol"},"Share the transaction hash in the post as a comment at the relevant ",(0,n.kt)("a",{parentName:"li",href:"https://research.lido.fi"},"Lido DAO forum")," post.")),(0,n.kt)("h2",{id:"ethereum-signature-verification"},"Ethereum signature verification"),(0,n.kt)("h3",{id:"in-case-of-using-eoa"},"In case of using EOA"),(0,n.kt)("p",null,"To verify the shared signature one can use Etherscan or MyEtherWallet UIs."),(0,n.kt)("h3",{id:"etherscan-ui"},"Etherscan UI"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Go to ",(0,n.kt)("a",{parentName:"li",href:"https://etherscan.io/verifiedSignatures"},"https://etherscan.io/verifiedSignatures"),"."),(0,n.kt)("li",{parentName:"ol"},"Click ",(0,n.kt)("inlineCode",{parentName:"li"},"Verify Signature")," button."),(0,n.kt)("li",{parentName:"ol"},"Input address, message & signature hash data & click ",(0,n.kt)("inlineCode",{parentName:"li"},"Continue"),"."),(0,n.kt)("li",{parentName:"ol"},"See whether the signature provided is valid.")),(0,n.kt)("h3",{id:"myetherwallet"},"MyEtherWallet"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Go to ",(0,n.kt)("a",{parentName:"li",href:"https://www.myetherwallet.com/tools?tool=verify"},"https://www.myetherwallet.com/tools?tool=verify"),"."),(0,n.kt)("li",{parentName:"ol"},"Encode the message text as hex string (use the tool like ",(0,n.kt)("a",{parentName:"li",href:"https://appdevtools.com/text-hex-converter"},"https://appdevtools.com/text-hex-converter"),")."),(0,n.kt)("li",{parentName:"ol"},"Enter json & click ",(0,n.kt)("inlineCode",{parentName:"li"},"Verify"),":",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},'{\n  "address": "0x...",\n  "msg": "0x...",\n  "sig": "signature_hash"\n}\n')),'Note that "msg" is hex text starting with ',(0,n.kt)("inlineCode",{parentName:"li"},"0x")," (add ",(0,n.kt)("inlineCode",{parentName:"li"},"0x")," before the hex encoded string if necessary)."),(0,n.kt)("li",{parentName:"ol"},"See whether the signature provided is valid.")),(0,n.kt)("h3",{id:"publishing-the-signature-on-etherscan"},"Publishing the signature on Etherscan"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Go to ",(0,n.kt)("a",{parentName:"li",href:"https://etherscan.io/verifiedSignatures"},"https://etherscan.io/verifiedSignatures"),' and click "Verify Signature".'),(0,n.kt)("li",{parentName:"ol"},"Enter address, plain text message (not hex version MyEtherWallet will give!) & the signature (with ",(0,n.kt)("inlineCode",{parentName:"li"},"0x"),' prefix), choose "Verify & publish" option & click "Continue".'),(0,n.kt)("li",{parentName:"ol"},"After the signature is verified you'll get the link for sharing.")),(0,n.kt)("h3",{id:"in-case-of-using-safe-multisig-1"},"In case of using Safe multisig"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Go to the signed transaction at the ",(0,n.kt)("a",{parentName:"li",href:"https://etherscan.io/"},"Etherscan"),"."),(0,n.kt)("li",{parentName:"ol"},'Click to show more details and find "input Data" field, click on "Decode input data".'),(0,n.kt)("li",{parentName:"ol"},'Copy a hex code in the "data" row and take it to any hex decoder (like ',(0,n.kt)("a",{parentName:"li",href:"https://www.duplichecker.com/hex-to-text.php"},"duplichecker"),")."),(0,n.kt)("li",{parentName:"ol"},"Decode and verify the message (please note, that you may need to delete leading ",(0,n.kt)("inlineCode",{parentName:"li"},"0x")," from the hex code acquired in the previous step).")))}p.isMDXComponent=!0}}]);